
ass2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001ff4  00002088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000135  00800142  00800142  000020ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030d2  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001188  00000000  00000000  00005532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d61  00000000  00000000  000066ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b4  00000000  00000000  0000841c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dda  00000000  00000000  00008cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002159  00000000  00000000  00009aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000bc03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      14:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_5>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      38:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      40:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_16>
      44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      50:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_20>
      54:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_21>
      58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      68:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      6c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      70:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      74:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      78:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	25 64       	ori	r18, 0x45	; 69
	...

0000007f <__c.2327>:
      7f:	25 64 00                                            %d.

00000082 <__c.2332>:
      82:	20 20 20 20 20 20 20 20 20 20 20 00                            .

0000008e <__c.2322>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 6f     Press a button o
      9e:	72 20 27 73 27 2f 27 53 27 20 74 6f 20 73 74 61     r 's'/'S' to sta
      ae:	72 74 20 61 20 6e 65 77 20 67 61 6d 65 00           rt a new game.

000000bc <__c.2320>:
      bc:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000c6 <__c.2313>:
      c6:	47 61 6d 65 20 50 61 75 73 65 64 00                 Game Paused.

000000d2 <__c.2311>:
      d2:	25 64 00                                            %d.

000000d5 <__c.2309>:
      d5:	25 64 00                                            %d.

000000d8 <__c.2307>:
      d8:	25 64 00                                            %d.

000000db <__c.2305>:
      db:	25 64 00                                            %d.

000000de <__c.2302>:
      de:	47 61 6d 65 20 53 70 65 65 64 3a 20 35 30 30 00     Game Speed: 500.

000000ee <__c.2300>:
      ee:	50 6c 61 79 65 72 20 32 20 53 63 6f 72 65 3a 20     Player 2 Score: 
      fe:	30 00                                               0.

00000100 <__c.2298>:
     100:	50 6c 61 79 65 72 20 31 20 53 63 6f 72 65 3a 20     Player 1 Score: 
     110:	30 00                                               0.

00000112 <__c.2264>:
     112:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
     122:	20 62 79 20 42 65 6e 6a 61 6d 69 6e 20 42 75 72      by Benjamin Bur
     132:	6e 20 2d 20 34 35 35 30 37 30 38 37 00              n - 45507087.

0000013f <__c.2262>:
     13f:	50 4f 4e 47 00                                      PONG.

00000144 <__c.2058>:
     144:	1b 5b 3f 32 35 68 00                                .[?25h.

0000014b <__c.2040>:
     14b:	1b 5b 32 4a 00                                      .[2J.

00000150 <__c.2025>:
     150:	1b 5b 25 64 3b 25 64 48 00 00                       .[%d;%dH..

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d8 e0       	ldi	r29, 0x08	; 8
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	11 e0       	ldi	r17, 0x01	; 1
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	e4 ef       	ldi	r30, 0xF4	; 244
     16e:	ff e1       	ldi	r31, 0x1F	; 31
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x10>
     172:	05 90       	lpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	a2 34       	cpi	r26, 0x42	; 66
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0xc>

0000017c <__do_clear_bss>:
     17c:	22 e0       	ldi	r18, 0x02	; 2
     17e:	a2 e4       	ldi	r26, 0x42	; 66
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	a7 37       	cpi	r26, 0x77	; 119
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
     18c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <main>
     190:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <_exit>

00000194 <__bad_interrupt>:
     194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000198 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1 << PCIE1);
     198:	e8 e6       	ldi	r30, 0x68	; 104
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1 << PCIF1);
     1a2:	8b b3       	in	r24, 0x1b	; 27
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);	
     1a8:	ec e6       	ldi	r30, 0x6C	; 108
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 60       	ori	r24, 0x0F	; 15
     1b0:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     1b2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <queue_length>
     1b6:	08 95       	ret

000001b8 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (queue_length > 0) {
     1b8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <queue_length>
     1bc:	18 16       	cp	r1, r24
     1be:	14 f5       	brge	.+68     	; 0x204 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     1c0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     1c4:	6f b7       	in	r22, 0x3f	; 63
		cli();
     1c6:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++) {
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <button_pushed+0x26>
			button_queue[i - 1] = button_queue[i];
     1cc:	f9 01       	movw	r30, r18
     1ce:	e8 5b       	subi	r30, 0xB8	; 184
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	40 81       	ld	r20, Z
     1d4:	f9 01       	movw	r30, r18
     1d6:	e9 5b       	subi	r30, 0xB9	; 185
     1d8:	fe 4f       	sbci	r31, 0xFE	; 254
     1da:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++) {
     1dc:	9f 5f       	subi	r25, 0xFF	; 255
     1de:	29 2f       	mov	r18, r25
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <queue_length>
     1e6:	04 2e       	mov	r0, r20
     1e8:	00 0c       	add	r0, r0
     1ea:	55 0b       	sbc	r21, r21
     1ec:	24 17       	cp	r18, r20
     1ee:	35 07       	cpc	r19, r21
     1f0:	6c f3       	brlt	.-38     	; 0x1cc <button_pushed+0x14>
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     1f2:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <queue_length>
     1f6:	91 50       	subi	r25, 0x01	; 1
     1f8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <queue_length>
		
		if (interrupts_were_enabled) {
     1fc:	66 23       	and	r22, r22
     1fe:	1c f4       	brge	.+6      	; 0x206 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     200:	78 94       	sei
     202:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     204:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     206:	08 95       	ret

00000208 <button_released>:
int8_t button_released(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed

	if (held_queue_length > 0) {
     208:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     20c:	88 23       	and	r24, r24
     20e:	f1 f0       	breq	.+60     	; 0x24c <button_released+0x44>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_held_queue[0];
     210:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <button_held_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     214:	5f b7       	in	r21, 0x3f	; 63
		cli();
     216:	f8 94       	cli
		
		for (uint8_t i = 1; i < held_queue_length; i++) {
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0b c0       	rjmp	.+22     	; 0x232 <button_released+0x2a>
			button_held_queue[i - 1] = button_held_queue[i];
     21c:	29 2f       	mov	r18, r25
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	ed 5b       	subi	r30, 0xBD	; 189
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	40 81       	ld	r20, Z
     228:	f9 01       	movw	r30, r18
     22a:	ee 5b       	subi	r30, 0xBE	; 190
     22c:	fe 4f       	sbci	r31, 0xFE	; 254
     22e:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < held_queue_length; i++) {
     230:	9f 5f       	subi	r25, 0xFF	; 255
     232:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
     236:	92 17       	cp	r25, r18
     238:	88 f3       	brcs	.-30     	; 0x21c <button_released+0x14>
			button_held_queue[i - 1] = button_held_queue[i];
		}
		held_queue_length--;
     23a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
     23e:	91 50       	subi	r25, 0x01	; 1
     240:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__data_end>
		
		if (interrupts_were_enabled) {
     244:	55 23       	and	r21, r21
     246:	1c f4       	brge	.+6      	; 0x24e <button_released+0x46>
			// Turn them back on again
			sei();
     248:	78 94       	sei
     24a:	08 95       	ret
		}
	}
	return return_value;
}
int8_t button_released(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     24c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     24e:	08 95       	ret

00000250 <__vector_5>:



// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     250:	1f 92       	push	r1
     252:	0f 92       	push	r0
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	0f 92       	push	r0
     258:	11 24       	eor	r1, r1
     25a:	2f 93       	push	r18
     25c:	3f 93       	push	r19
     25e:	8f 93       	push	r24
     260:	9f 93       	push	r25
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     266:	93 b1       	in	r25, 0x03	; 3
     268:	9f 70       	andi	r25, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	49 c0       	rjmp	.+146    	; 0x300 <__vector_5+0xb0>
		if ((queue_length < BUTTON_QUEUE_SIZE
     26e:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <queue_length>
     272:	24 30       	cpi	r18, 0x04	; 4
     274:	0c f5       	brge	.+66     	; 0x2b8 <__vector_5+0x68>
				&& (button_state & (1 << pin))
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	08 2e       	mov	r0, r24
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_5+0x32>
     27e:	35 95       	asr	r19
     280:	27 95       	ror	r18
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <__vector_5+0x2e>
     286:	20 ff       	sbrs	r18, 0
     288:	17 c0       	rjmp	.+46     	; 0x2b8 <__vector_5+0x68>
				&& !(last_button_state & (1 << pin)))) {
     28a:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <last_button_state>
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	08 2e       	mov	r0, r24
     292:	02 c0       	rjmp	.+4      	; 0x298 <__vector_5+0x48>
     294:	35 95       	asr	r19
     296:	27 95       	ror	r18
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <__vector_5+0x44>
     29c:	20 fd       	sbrc	r18, 0
     29e:	0c c0       	rjmp	.+24     	; 0x2b8 <__vector_5+0x68>
				//| ((queue_length < BUTTON_QUEUE_SIZE) 
				//	&& (auto_repeat_time >= 100)
				//	&& (button_state & (1 << pin)))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2a0:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <queue_length>
     2a4:	21 e0       	ldi	r18, 0x01	; 1
     2a6:	2e 0f       	add	r18, r30
     2a8:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <queue_length>
     2ac:	0e 2e       	mov	r0, r30
     2ae:	00 0c       	add	r0, r0
     2b0:	ff 0b       	sbc	r31, r31
     2b2:	e8 5b       	subi	r30, 0xB8	; 184
     2b4:	fe 4f       	sbci	r31, 0xFE	; 254
     2b6:	80 83       	st	Z, r24
		}
		if ((held_queue_length < BUTTON_QUEUE_SIZE
     2b8:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
     2bc:	24 30       	cpi	r18, 0x04	; 4
     2be:	f8 f4       	brcc	.+62     	; 0x2fe <__vector_5+0xae>
				&& !(button_state & (1 << pin))
     2c0:	29 2f       	mov	r18, r25
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	08 2e       	mov	r0, r24
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <__vector_5+0x7c>
     2c8:	35 95       	asr	r19
     2ca:	27 95       	ror	r18
     2cc:	0a 94       	dec	r0
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <__vector_5+0x78>
     2d0:	20 fd       	sbrc	r18, 0
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <__vector_5+0xae>
				&& (last_button_state & (1 << pin)))) {
     2d4:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <last_button_state>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	08 2e       	mov	r0, r24
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__vector_5+0x92>
     2de:	35 95       	asr	r19
     2e0:	27 95       	ror	r18
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <__vector_5+0x8e>
     2e6:	20 ff       	sbrs	r18, 0
     2e8:	0a c0       	rjmp	.+20     	; 0x2fe <__vector_5+0xae>
			button_held_queue[held_queue_length++] = pin;
     2ea:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end>
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	2e 0f       	add	r18, r30
     2f2:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <__data_end>
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	ed 5b       	subi	r30, 0xBD	; 189
     2fa:	fe 4f       	sbci	r31, 0xFE	; 254
     2fc:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	84 30       	cpi	r24, 0x04	; 4
     302:	08 f4       	brcc	.+2      	; 0x306 <__vector_5+0xb6>
     304:	b4 cf       	rjmp	.-152    	; 0x26e <__vector_5+0x1e>
			button_held_queue[held_queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     306:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <last_button_state>
}
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	9f 91       	pop	r25
     310:	8f 91       	pop	r24
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <initialise_display>:
    0b0111001111101111, // 9
};

// Initialise the display for the board, this creates the display
// for an empty board.
void initialise_display(void) {
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	28 97       	sbiw	r28, 0x08	; 8
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     338:	0e 94 52 06 	call	0xca4	; 0xca4 <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	09 c0       	rjmp	.+18     	; 0x354 <initialise_display+0x34>
		col_colours[row] = MATRIX_COLOUR_BORDER;
     342:	e1 e0       	ldi	r30, 0x01	; 1
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ec 0f       	add	r30, r28
     348:	fd 1f       	adc	r31, r29
     34a:	e8 0f       	add	r30, r24
     34c:	f9 1f       	adc	r31, r25
     34e:	25 e3       	ldi	r18, 0x35	; 53
     350:	20 83       	st	Z, r18
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	88 30       	cpi	r24, 0x08	; 8
     356:	91 05       	cpc	r25, r1
     358:	a4 f3       	brlt	.-24     	; 0x342 <initialise_display+0x22>
     35a:	01 e0       	ldi	r16, 0x01	; 1
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	08 c0       	rjmp	.+16     	; 0x370 <initialise_display+0x50>
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	80 2f       	mov	r24, r16
     368:	0e 94 35 06 	call	0xc6a	; 0xc6a <ledmatrix_update_column>
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
		col_colours[row] = MATRIX_COLOUR_BORDER;
	}

	// then add the bounds on the left
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
     36c:	0f 5f       	subi	r16, 0xFF	; 255
     36e:	1f 4f       	sbci	r17, 0xFF	; 255
     370:	02 30       	cpi	r16, 0x02	; 2
     372:	11 05       	cpc	r17, r1
     374:	ac f3       	brlt	.-22     	; 0x360 <initialise_display+0x40>
     376:	0e e0       	ldi	r16, 0x0E	; 14
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	08 c0       	rjmp	.+16     	; 0x38c <initialise_display+0x6c>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
     37c:	be 01       	movw	r22, r28
     37e:	6f 5f       	subi	r22, 0xFF	; 255
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	80 2f       	mov	r24, r16
     384:	0e 94 35 06 	call	0xc6a	; 0xc6a <ledmatrix_update_column>
	for (int x = 1; x < 1 + GAME_BORDER_WIDTH; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = 14; x < 14 + GAME_BORDER_WIDTH; x++) {
     388:	0f 5f       	subi	r16, 0xFF	; 255
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	0f 30       	cpi	r16, 0x0F	; 15
     38e:	11 05       	cpc	r17, r1
     390:	ac f3       	brlt	.-22     	; 0x37c <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
}
     392:	28 96       	adiw	r28, 0x08	; 8
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <show_start_screen>:

void show_start_screen(void) {
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	28 97       	sbiw	r28, 0x08	; 8
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     3be:	0e 94 52 06 	call	0xca4	; 0xca4 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     3c2:	10 e0       	ldi	r17, 0x00	; 0
     3c4:	29 c0       	rjmp	.+82     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		col_data = pong_display[col];
     3c6:	e1 2f       	mov	r30, r17
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	e0 5d       	subi	r30, 0xD0	; 208
     3cc:	fe 4f       	sbci	r31, 0xFE	; 254
     3ce:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     3d0:	90 ff       	sbrs	r25, 0
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <show_start_screen+0x30>
			colour = COLOUR_RED;
     3d4:	2f e0       	ldi	r18, 0x0F	; 15
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <show_start_screen+0x32>
		} else {
			colour = COLOUR_GREEN;
     3d8:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     3da:	87 e0       	ldi	r24, 0x07	; 7
     3dc:	13 c0       	rjmp	.+38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     3de:	99 23       	and	r25, r25
     3e0:	44 f4       	brge	.+16     	; 0x3f2 <show_start_screen+0x4a>
				column_colour_data[i] = colour;
     3e2:	e1 e0       	ldi	r30, 0x01	; 1
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	ec 0f       	add	r30, r28
     3e8:	fd 1f       	adc	r31, r29
     3ea:	e8 0f       	add	r30, r24
     3ec:	f1 1d       	adc	r31, r1
     3ee:	20 83       	st	Z, r18
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
			} else {
				column_colour_data[i] = 0;
     3f2:	e1 e0       	ldi	r30, 0x01	; 1
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	ec 0f       	add	r30, r28
     3f8:	fd 1f       	adc	r31, r29
     3fa:	e8 0f       	add	r30, r24
     3fc:	f1 1d       	adc	r31, r1
     3fe:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     400:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i = 7; i >= 1; i--) {
     402:	81 50       	subi	r24, 0x01	; 1
     404:	81 11       	cpse	r24, r1
     406:	eb cf       	rjmp	.-42     	; 0x3de <show_start_screen+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     408:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     40a:	be 01       	movw	r22, r28
     40c:	6f 5f       	subi	r22, 0xFF	; 255
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	81 2f       	mov	r24, r17
     412:	0e 94 35 06 	call	0xc6a	; 0xc6a <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     416:	1f 5f       	subi	r17, 0xFF	; 255
     418:	10 31       	cpi	r17, 0x10	; 16
     41a:	a8 f2       	brcs	.-86     	; 0x3c6 <show_start_screen+0x1e>
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
		// Update pong ball colour
	ledmatrix_update_pixel(START_SCREEN_BALL_X, START_SCREEN_BALL_Y, MATRIX_COLOUR_BALL);
     41c:	4f e0       	ldi	r20, 0x0F	; 15
     41e:	64 e0       	ldi	r22, 0x04	; 4
     420:	8e e0       	ldi	r24, 0x0E	; 14
     422:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
}
     426:	28 96       	adiw	r28, 0x08	; 8
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <update_start_screen>:

// Update dynamic start screen based on the frame number (0-11)
// Note: this is hardcoded to PONG game.
// Purposefully obfuscated so functionality cannot be copied for movement tasks
void update_start_screen(uint8_t frame_number) {
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	68 97       	sbiw	r28, 0x18	; 24
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
	
	if (frame_number < 0 || frame_number > 11) {
     450:	8c 30       	cpi	r24, 0x0C	; 12
     452:	08 f0       	brcs	.+2      	; 0x456 <update_start_screen+0x1c>
     454:	64 c0       	rjmp	.+200    	; 0x51e <update_start_screen+0xe4>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	17 c0       	rjmp	.+46     	; 0x488 <update_start_screen+0x4e>
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
			column_colour_data[col][row] = 0;
     45a:	e2 2f       	mov	r30, r18
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	ee 0f       	add	r30, r30
     468:	ff 1f       	adc	r31, r31
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	4c 0f       	add	r20, r28
     470:	5d 1f       	adc	r21, r29
     472:	e4 0f       	add	r30, r20
     474:	f5 1f       	adc	r31, r21
     476:	e9 0f       	add	r30, r25
     478:	f1 1d       	adc	r31, r1
     47a:	10 82       	st	Z, r1
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++) {
     47c:	9f 5f       	subi	r25, 0xFF	; 255
     47e:	01 c0       	rjmp	.+2      	; 0x482 <update_start_screen+0x48>
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	98 30       	cpi	r25, 0x08	; 8
     484:	50 f3       	brcs	.-44     	; 0x45a <update_start_screen+0x20>
		return;
	}
	
	// Clear the dynamic columns
	MatrixColumn column_colour_data[PONG_NUM_DYNAMIC_COLS];
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	23 30       	cpi	r18, 0x03	; 3
     48a:	d0 f3       	brcs	.-12     	; 0x480 <update_start_screen+0x46>
			column_colour_data[col][row] = 0;
		}
	}
	
	// Set the middle paddle pixel
	column_colour_data[1][6] = MATRIX_COLOUR_PLAYER;
     48c:	90 ef       	ldi	r25, 0xF0	; 240
     48e:	9f 87       	std	Y+15, r25	; 0x0f
	column_colour_data[1][1] = MATRIX_COLOUR_PLAYER;
     490:	9a 87       	std	Y+10, r25	; 0x0a
	
	// Set the edge paddle pixel depending on frame number
	if (frame_number < 3 || frame_number >= 9) {
     492:	9d ef       	ldi	r25, 0xFD	; 253
     494:	98 0f       	add	r25, r24
     496:	96 30       	cpi	r25, 0x06	; 6
     498:	18 f0       	brcs	.+6      	; 0x4a0 <update_start_screen+0x66>
		column_colour_data[2][6] = MATRIX_COLOUR_PLAYER;
     49a:	90 ef       	ldi	r25, 0xF0	; 240
     49c:	9f 8b       	std	Y+23, r25	; 0x17
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <update_start_screen+0x6a>
	} else {
		column_colour_data[0][6] = MATRIX_COLOUR_PLAYER;
     4a0:	90 ef       	ldi	r25, 0xF0	; 240
     4a2:	9f 83       	std	Y+7, r25	; 0x07
	}
	if (frame_number < 6) {
     4a4:	86 30       	cpi	r24, 0x06	; 6
     4a6:	18 f4       	brcc	.+6      	; 0x4ae <update_start_screen+0x74>
		column_colour_data[0][1] = MATRIX_COLOUR_PLAYER;
     4a8:	90 ef       	ldi	r25, 0xF0	; 240
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <update_start_screen+0x78>
	} else {
		column_colour_data[2][1] = MATRIX_COLOUR_PLAYER;
     4ae:	90 ef       	ldi	r25, 0xF0	; 240
     4b0:	9a 8b       	std	Y+18, r25	; 0x12
	}
	
	// Set the ball pixel depending on frame number
	if (frame_number == 5 || frame_number == 11) {
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	11 f0       	breq	.+4      	; 0x4ba <update_start_screen+0x80>
     4b6:	8b 30       	cpi	r24, 0x0B	; 11
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <update_start_screen+0x86>
		column_colour_data[1][5] = MATRIX_COLOUR_BALL;
     4ba:	8f e0       	ldi	r24, 0x0F	; 15
     4bc:	8e 87       	std	Y+14, r24	; 0x0e
     4be:	15 c0       	rjmp	.+42     	; 0x4ea <update_start_screen+0xb0>
	} else if (frame_number == 0 || frame_number == 4 || frame_number == 6
     4c0:	88 23       	and	r24, r24
     4c2:	31 f0       	breq	.+12     	; 0x4d0 <update_start_screen+0x96>
     4c4:	84 30       	cpi	r24, 0x04	; 4
     4c6:	21 f0       	breq	.+8      	; 0x4d0 <update_start_screen+0x96>
     4c8:	86 30       	cpi	r24, 0x06	; 6
     4ca:	11 f0       	breq	.+4      	; 0x4d0 <update_start_screen+0x96>
			|| frame_number == 10) {
     4cc:	8a 30       	cpi	r24, 0x0A	; 10
     4ce:	19 f4       	brne	.+6      	; 0x4d6 <update_start_screen+0x9c>
		column_colour_data[1][4] = MATRIX_COLOUR_BALL;
     4d0:	8f e0       	ldi	r24, 0x0F	; 15
     4d2:	8d 87       	std	Y+13, r24	; 0x0d
     4d4:	0a c0       	rjmp	.+20     	; 0x4ea <update_start_screen+0xb0>
	} else if (frame_number == 1 || frame_number == 3 || frame_number == 7
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <update_start_screen+0xac>
     4da:	83 30       	cpi	r24, 0x03	; 3
     4dc:	21 f0       	breq	.+8      	; 0x4e6 <update_start_screen+0xac>
     4de:	87 30       	cpi	r24, 0x07	; 7
     4e0:	11 f0       	breq	.+4      	; 0x4e6 <update_start_screen+0xac>
			|| frame_number == 9) {
     4e2:	89 30       	cpi	r24, 0x09	; 9
     4e4:	21 f4       	brne	.+8      	; 0x4ee <update_start_screen+0xb4>
		column_colour_data[1][3] = MATRIX_COLOUR_BALL;
     4e6:	8f e0       	ldi	r24, 0x0F	; 15
     4e8:	8c 87       	std	Y+12, r24	; 0x0c
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	16 c0       	rjmp	.+44     	; 0x51a <update_start_screen+0xe0>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
     4ee:	8f e0       	ldi	r24, 0x0F	; 15
     4f0:	8b 87       	std	Y+11, r24	; 0x0b
     4f2:	fb cf       	rjmp	.-10     	; 0x4ea <update_start_screen+0xb0>
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
     4f4:	61 2f       	mov	r22, r17
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	66 0f       	add	r22, r22
     4fa:	77 1f       	adc	r23, r23
     4fc:	66 0f       	add	r22, r22
     4fe:	77 1f       	adc	r23, r23
     500:	66 0f       	add	r22, r22
     502:	77 1f       	adc	r23, r23
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	8c 0f       	add	r24, r28
     50a:	9d 1f       	adc	r25, r29
     50c:	68 0f       	add	r22, r24
     50e:	79 1f       	adc	r23, r25
     510:	8d e0       	ldi	r24, 0x0D	; 13
     512:	81 0f       	add	r24, r17
     514:	0e 94 35 06 	call	0xc6a	; 0xc6a <ledmatrix_update_column>
	} else {
		column_colour_data[1][2] = MATRIX_COLOUR_BALL;
	}

	// Update columns
	for (uint8_t col = 0; col < PONG_NUM_DYNAMIC_COLS; col++) {
     518:	1f 5f       	subi	r17, 0xFF	; 255
     51a:	13 30       	cpi	r17, 0x03	; 3
     51c:	58 f3       	brcs	.-42     	; 0x4f4 <update_start_screen+0xba>
		ledmatrix_update_column(col + PONG_DYNAMIC_COL_START, column_colour_data[col]);
	}
}
     51e:	68 96       	adiw	r28, 0x18	; 24
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	08 95       	ret

00000532 <update_square_colour>:
// provided object
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	PixelColour colour;
	
	switch (object) {
     532:	41 30       	cpi	r20, 0x01	; 1
     534:	31 f0       	breq	.+12     	; 0x542 <update_square_colour+0x10>
     536:	42 30       	cpi	r20, 0x02	; 2
     538:	11 f0       	breq	.+4      	; 0x53e <update_square_colour+0xc>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	03 c0       	rjmp	.+6      	; 0x544 <update_square_colour+0x12>
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
			break;
		case BALL:
			colour = MATRIX_COLOUR_BALL;
     53e:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     540:	01 c0       	rjmp	.+2      	; 0x544 <update_square_colour+0x12>
	switch (object) {
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case PLAYER:
			colour = MATRIX_COLOUR_PLAYER;
     542:	40 ef       	ldi	r20, 0xF0	; 240
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(x + MATRIX_X_OFFSET, y + MATRIX_Y_OFFSET, colour);
     544:	8e 5f       	subi	r24, 0xFE	; 254
     546:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
     54a:	08 95       	ret

0000054c <led_matrix_score>:
}

//int8_t p1_led_score = p1score;
//int8_t p2_led_score = p1score;
void led_matrix_score(void) {
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	c0 54       	subi	r28, 0x40	; 64
     562:	d1 09       	sbc	r29, r1
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
	int p1_led_score[16];
	int p2_led_score[16];
	int n = 0;
	int m = 0;
	for (int x = 0; x < 15; x++) {
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	3f c0       	rjmp	.+126    	; 0x5f2 <led_matrix_score+0xa6>
		p1_led_score[x] = !!(LED_DIGIT_FONTS[p1score] & (1 << x));
     574:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <p1score>
     578:	ee 0f       	add	r30, r30
     57a:	ff 0b       	sbc	r31, r31
     57c:	e4 5e       	subi	r30, 0xE4	; 228
     57e:	fe 4f       	sbci	r31, 0xFE	; 254
     580:	40 81       	ld	r20, Z
     582:	51 81       	ldd	r21, Z+1	; 0x01
     584:	21 e0       	ldi	r18, 0x01	; 1
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	08 2e       	mov	r0, r24
     58a:	02 c0       	rjmp	.+4      	; 0x590 <led_matrix_score+0x44>
     58c:	22 0f       	add	r18, r18
     58e:	33 1f       	adc	r19, r19
     590:	0a 94       	dec	r0
     592:	e2 f7       	brpl	.-8      	; 0x58c <led_matrix_score+0x40>
     594:	42 23       	and	r20, r18
     596:	53 23       	and	r21, r19
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	45 2b       	or	r20, r21
     59e:	11 f4       	brne	.+4      	; 0x5a4 <led_matrix_score+0x58>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	4c 0f       	add	r20, r28
     5b0:	5d 1f       	adc	r21, r29
     5b2:	e4 0f       	add	r30, r20
     5b4:	f5 1f       	adc	r31, r21
     5b6:	71 83       	std	Z+1, r23	; 0x01
     5b8:	60 83       	st	Z, r22
		p2_led_score[x] = !!(LED_DIGIT_FONTS[p2score] & (1 << x));
     5ba:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <p2score>
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 0b       	sbc	r31, r31
     5c2:	e4 5e       	subi	r30, 0xE4	; 228
     5c4:	fe 4f       	sbci	r31, 0xFE	; 254
     5c6:	40 81       	ld	r20, Z
     5c8:	51 81       	ldd	r21, Z+1	; 0x01
     5ca:	24 23       	and	r18, r20
     5cc:	35 23       	and	r19, r21
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	23 2b       	or	r18, r19
     5d4:	11 f4       	brne	.+4      	; 0x5da <led_matrix_score+0x8e>
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	ee 0f       	add	r30, r30
     5de:	ff 1f       	adc	r31, r31
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	2c 0f       	add	r18, r28
     5e6:	3d 1f       	adc	r19, r29
     5e8:	e2 0f       	add	r30, r18
     5ea:	f3 1f       	adc	r31, r19
     5ec:	51 a3       	std	Z+33, r21	; 0x21
     5ee:	40 a3       	std	Z+32, r20	; 0x20
void led_matrix_score(void) {
	int p1_led_score[16];
	int p2_led_score[16];
	int n = 0;
	int m = 0;
	for (int x = 0; x < 15; x++) {
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	8f 30       	cpi	r24, 0x0F	; 15
     5f4:	91 05       	cpc	r25, r1
     5f6:	0c f4       	brge	.+2      	; 0x5fa <led_matrix_score+0xae>
     5f8:	bd cf       	rjmp	.-134    	; 0x574 <led_matrix_score+0x28>
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f6 e0       	ldi	r31, 0x06	; 6
     5fe:	cf 2e       	mov	r12, r31
     600:	d1 2c       	mov	r13, r1
     602:	f0 2d       	mov	r31, r0
     604:	e1 2c       	mov	r14, r1
     606:	f1 2c       	mov	r15, r1
     608:	24 c0       	rjmp	.+72     	; 0x652 <led_matrix_score+0x106>
		for (int x = 6; x >= 4; x--) {
			/*if (p1_led_score[n] == 0) {
				ledmatrix_update_pixel(x, y, COLOUR_BLACK);
				n++;
			}*/
			if (p1_led_score[n] == 1) {
     60a:	f7 01       	movw	r30, r14
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	4c 0f       	add	r20, r28
     616:	5d 1f       	adc	r21, r29
     618:	e4 0f       	add	r30, r20
     61a:	f5 1f       	adc	r31, r21
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	49 f4       	brne	.+18     	; 0x636 <led_matrix_score+0xea>
				ledmatrix_update_pixel(x, y, COLOUR_SCORE);
     624:	4f e8       	ldi	r20, 0x8F	; 143
     626:	6c 2d       	mov	r22, r12
     628:	80 2f       	mov	r24, r16
     62a:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
				n++;
     62e:	5f ef       	ldi	r21, 0xFF	; 255
     630:	e5 1a       	sub	r14, r21
     632:	f5 0a       	sbc	r15, r21
     634:	03 c0       	rjmp	.+6      	; 0x63c <led_matrix_score+0xf0>
			} else{
			n++;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	e8 1a       	sub	r14, r24
     63a:	f8 0a       	sbc	r15, r24
	for (int x = 0; x < 15; x++) {
		p1_led_score[x] = !!(LED_DIGIT_FONTS[p1score] & (1 << x));
		p2_led_score[x] = !!(LED_DIGIT_FONTS[p2score] & (1 << x));
	}
	for (int y = 6; y > 1; y--) {
		for (int x = 6; x >= 4; x--) {
     63c:	01 50       	subi	r16, 0x01	; 1
     63e:	11 09       	sbc	r17, r1
     640:	02 c0       	rjmp	.+4      	; 0x646 <led_matrix_score+0xfa>
     642:	06 e0       	ldi	r16, 0x06	; 6
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	04 30       	cpi	r16, 0x04	; 4
     648:	11 05       	cpc	r17, r1
     64a:	fc f6       	brge	.-66     	; 0x60a <led_matrix_score+0xbe>
	int m = 0;
	for (int x = 0; x < 15; x++) {
		p1_led_score[x] = !!(LED_DIGIT_FONTS[p1score] & (1 << x));
		p2_led_score[x] = !!(LED_DIGIT_FONTS[p2score] & (1 << x));
	}
	for (int y = 6; y > 1; y--) {
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	c9 1a       	sub	r12, r25
     650:	d1 08       	sbc	r13, r1
     652:	22 e0       	ldi	r18, 0x02	; 2
     654:	c2 16       	cp	r12, r18
     656:	d1 04       	cpc	r13, r1
     658:	a4 f7       	brge	.-24     	; 0x642 <led_matrix_score+0xf6>
     65a:	0f 2e       	mov	r0, r31
     65c:	f6 e0       	ldi	r31, 0x06	; 6
     65e:	cf 2e       	mov	r12, r31
     660:	d1 2c       	mov	r13, r1
     662:	f0 2d       	mov	r31, r0
     664:	e1 2c       	mov	r14, r1
     666:	f1 2c       	mov	r15, r1
     668:	24 c0       	rjmp	.+72     	; 0x6b2 <led_matrix_score+0x166>
		for (int x = 11; x >= 9; x--) {
			/*if (p2_led_score[m] == 0) {
				ledmatrix_update_pixel(q, w, COLOUR_BLACK);
				w++;
			}*/
			if (p2_led_score[m] == 1) {
     66a:	f7 01       	movw	r30, r14
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	4c 0f       	add	r20, r28
     676:	5d 1f       	adc	r21, r29
     678:	e4 0f       	add	r30, r20
     67a:	f5 1f       	adc	r31, r21
     67c:	80 a1       	ldd	r24, Z+32	; 0x20
     67e:	91 a1       	ldd	r25, Z+33	; 0x21
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	49 f4       	brne	.+18     	; 0x696 <led_matrix_score+0x14a>
				ledmatrix_update_pixel(x, y, COLOUR_SCORE);
     684:	4f e8       	ldi	r20, 0x8F	; 143
     686:	6c 2d       	mov	r22, r12
     688:	80 2f       	mov	r24, r16
     68a:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
				m++;
     68e:	5f ef       	ldi	r21, 0xFF	; 255
     690:	e5 1a       	sub	r14, r21
     692:	f5 0a       	sbc	r15, r21
     694:	03 c0       	rjmp	.+6      	; 0x69c <led_matrix_score+0x150>
			}else{
			m++;
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	e8 1a       	sub	r14, r24
     69a:	f8 0a       	sbc	r15, r24
			n++;
			}
		}
	}
	for (int y = 6; y > 1; y--) {
		for (int x = 11; x >= 9; x--) {
     69c:	01 50       	subi	r16, 0x01	; 1
     69e:	11 09       	sbc	r17, r1
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <led_matrix_score+0x15a>
     6a2:	0b e0       	ldi	r16, 0x0B	; 11
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	09 30       	cpi	r16, 0x09	; 9
     6a8:	11 05       	cpc	r17, r1
     6aa:	fc f6       	brge	.-66     	; 0x66a <led_matrix_score+0x11e>
			} else{
			n++;
			}
		}
	}
	for (int y = 6; y > 1; y--) {
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	c9 1a       	sub	r12, r25
     6b0:	d1 08       	sbc	r13, r1
     6b2:	22 e0       	ldi	r18, 0x02	; 2
     6b4:	c2 16       	cp	r12, r18
     6b6:	d1 04       	cpc	r13, r1
     6b8:	a4 f7       	brge	.-24     	; 0x6a2 <led_matrix_score+0x156>
			}else{
			m++;
			}
		}
	}	
}
     6ba:	c0 5c       	subi	r28, 0xC0	; 192
     6bc:	df 4f       	sbci	r29, 0xFF	; 255
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	08 95       	ret

000006da <led_matrix_score_clear>:

void led_matrix_score_clear(void) {
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
	for (int y = 6; y > 1; y--) {
     6e2:	06 e0       	ldi	r16, 0x06	; 6
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <led_matrix_score_clear+0x2a>
		for (int x = 6; x >= 4; x--) {
			ledmatrix_update_pixel(x, y, COLOUR_BLACK);
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	60 2f       	mov	r22, r16
     6ec:	8c 2f       	mov	r24, r28
     6ee:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
	}	
}

void led_matrix_score_clear(void) {
	for (int y = 6; y > 1; y--) {
		for (int x = 6; x >= 4; x--) {
     6f2:	21 97       	sbiw	r28, 0x01	; 1
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <led_matrix_score_clear+0x20>
     6f6:	c6 e0       	ldi	r28, 0x06	; 6
     6f8:	d0 e0       	ldi	r29, 0x00	; 0
     6fa:	c4 30       	cpi	r28, 0x04	; 4
     6fc:	d1 05       	cpc	r29, r1
     6fe:	a4 f7       	brge	.-24     	; 0x6e8 <led_matrix_score_clear+0xe>
		}
	}	
}

void led_matrix_score_clear(void) {
	for (int y = 6; y > 1; y--) {
     700:	01 50       	subi	r16, 0x01	; 1
     702:	11 09       	sbc	r17, r1
     704:	02 30       	cpi	r16, 0x02	; 2
     706:	11 05       	cpc	r17, r1
     708:	b4 f7       	brge	.-20     	; 0x6f6 <led_matrix_score_clear+0x1c>
     70a:	06 e0       	ldi	r16, 0x06	; 6
     70c:	10 e0       	ldi	r17, 0x00	; 0
     70e:	0e c0       	rjmp	.+28     	; 0x72c <led_matrix_score_clear+0x52>
			ledmatrix_update_pixel(x, y, COLOUR_BLACK);
		}
	}
	for (int w = 6; w > 1; w--) {
		for (int q = 11; q >= 9; q--) {
			ledmatrix_update_pixel(q, w, COLOUR_BLACK);
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	60 2f       	mov	r22, r16
     714:	8c 2f       	mov	r24, r28
     716:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		for (int x = 6; x >= 4; x--) {
			ledmatrix_update_pixel(x, y, COLOUR_BLACK);
		}
	}
	for (int w = 6; w > 1; w--) {
		for (int q = 11; q >= 9; q--) {
     71a:	21 97       	sbiw	r28, 0x01	; 1
     71c:	02 c0       	rjmp	.+4      	; 0x722 <led_matrix_score_clear+0x48>
     71e:	cb e0       	ldi	r28, 0x0B	; 11
     720:	d0 e0       	ldi	r29, 0x00	; 0
     722:	c9 30       	cpi	r28, 0x09	; 9
     724:	d1 05       	cpc	r29, r1
     726:	a4 f7       	brge	.-24     	; 0x710 <led_matrix_score_clear+0x36>
	for (int y = 6; y > 1; y--) {
		for (int x = 6; x >= 4; x--) {
			ledmatrix_update_pixel(x, y, COLOUR_BLACK);
		}
	}
	for (int w = 6; w > 1; w--) {
     728:	01 50       	subi	r16, 0x01	; 1
     72a:	11 09       	sbc	r17, r1
     72c:	02 30       	cpi	r16, 0x02	; 2
     72e:	11 05       	cpc	r17, r1
     730:	b4 f7       	brge	.-20     	; 0x71e <led_matrix_score_clear+0x44>
		for (int q = 11; q >= 9; q--) {
			ledmatrix_update_pixel(q, w, COLOUR_BLACK);
		}
	}
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <ret_player_1_score>:

//uint16_t LED_DIGIT_FONTS[10];

int8_t ret_player_1_score(void) {
	return p1score;
}
     73c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <p1score>
     740:	08 95       	ret

00000742 <ret_player_2_score>:
int8_t ret_player_2_score(void) {
	return p2score;
}
     742:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <p2score>
     746:	08 95       	ret

00000748 <rand_x_direction>:
/* Takes current time as the seed, creates a random int 0 or 1, multiplies it by 2, negates it then adds 1
   1) 1 -> 2 -> -2 -> -1
   2) 0 -> 0 -> 0 -> 1 */
void rand_x_direction(void) {
	int8_t rand_int_x;
	rand_int_x = -((rand() & 1) << 1) + 1;
     748:	0e 94 9a 0c 	call	0x1934	; 0x1934 <rand>
	if (rand_int_x == 1) {
     74c:	80 fd       	sbrc	r24, 0
     74e:	04 c0       	rjmp	.+8      	; 0x758 <rand_x_direction+0x10>
		ball_x_direction = RIGHT;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ball_x_direction>
     756:	08 95       	ret
	} else {
		ball_x_direction = LEFT;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ball_x_direction>
     75e:	08 95       	ret

00000760 <rand_y_direction>:
	
}

void rand_y_direction(void) {
	if ((ball_y != 1) | (ball_y != BOARD_HEIGHT)) {
		ball_y_direction = (rand() % 3) - 1;
     760:	0e 94 9a 0c 	call	0x1934	; 0x1934 <rand>
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__divmodhi4>
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ball_y_direction>
	} 
	if (ball_y == BOARD_HEIGHT) {
     772:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ball_y>
     776:	88 30       	cpi	r24, 0x08	; 8
     778:	49 f4       	brne	.+18     	; 0x78c <rand_y_direction+0x2c>
		ball_y_direction = (rand() % 2) ? 0 : -1;
     77a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <rand>
     77e:	80 ff       	sbrs	r24, 0
     780:	02 c0       	rjmp	.+4      	; 0x786 <rand_y_direction+0x26>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	01 c0       	rjmp	.+2      	; 0x788 <rand_y_direction+0x28>
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ball_y_direction>
	}
	if (ball_y == 0) {
     78c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <ball_y>
     790:	81 11       	cpse	r24, r1
     792:	07 c0       	rjmp	.+14     	; 0x7a2 <rand_y_direction+0x42>
		ball_y_direction = (rand() % 2) ? 0 : 1;
     794:	0e 94 9a 0c 	call	0x1934	; 0x1934 <rand>
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	80 fd       	sbrc	r24, 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <ball_y_direction>
     7a2:	08 95       	ret

000007a4 <draw_player_paddle>:
}

// Draw player 1 or 2 on the game board at their current position (specified
// by the `PLAYER_X_COORDINATES` and `player_y_coordinates` variables).
// This makes it easier to draw the multiple pixels of the players.
void draw_player_paddle(uint8_t player_to_draw) {
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	e0 5c       	subi	r30, 0xC0	; 192
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	f0 80       	ld	r15, Z
	int8_t player_y = player_y_coordinates[player_to_draw];
     7b8:	fc 01       	movw	r30, r24
     7ba:	e3 5b       	subi	r30, 0xB3	; 179
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	00 81       	ld	r16, Z

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     7c0:	00 2e       	mov	r0, r16
     7c2:	00 0c       	add	r0, r0
     7c4:	11 0b       	sbc	r17, r17
     7c6:	e8 01       	movw	r28, r16
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <draw_player_paddle+0x32>
		update_square_colour(player_x, y, PLAYER);
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	6c 2f       	mov	r22, r28
     7ce:	8f 2d       	mov	r24, r15
     7d0:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
// This makes it easier to draw the multiple pixels of the players.
void draw_player_paddle(uint8_t player_to_draw) {
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     7d4:	21 96       	adiw	r28, 0x01	; 1
     7d6:	c8 01       	movw	r24, r16
     7d8:	02 96       	adiw	r24, 0x02	; 2
     7da:	c8 17       	cp	r28, r24
     7dc:	d9 07       	cpc	r29, r25
     7de:	ac f3       	brlt	.-22     	; 0x7ca <draw_player_paddle+0x26>
		update_square_colour(player_x, y, PLAYER);
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	08 95       	ret

000007ec <initialise_game>:

// Initialise the player paddles, ball and display to start a game of PONG.
void initialise_game(void) {
	
	// initialise the display we are using.
	initialise_display();
     7ec:	0e 94 90 01 	call	0x320	; 0x320 <initialise_display>

	// Start players in the middle of the board
	player_y_coordinates[PLAYER_1] = BOARD_HEIGHT / 2 - 1;
     7f0:	ed e4       	ldi	r30, 0x4D	; 77
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	80 83       	st	Z, r24
	player_y_coordinates[PLAYER_2] = BOARD_HEIGHT / 2 - 1;
     7f8:	81 83       	std	Z+1, r24	; 0x01

	draw_player_paddle(PLAYER_1);
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <draw_player_paddle>
	draw_player_paddle(PLAYER_2);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <draw_player_paddle>
	// Player Score
	p1score = 0;
     806:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <p1score>
	p2score = 0;
     80a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <p2score>
	
	// Rally Counter
	p1rally = 0;
     80e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <p1rally>
	p2rally = 0;
     812:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <p2rally>

	// Clear the old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ball_y>
     81c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ball_x>
     820:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
	
	// Reset ball position and direction
	ball_x = BALL_START_X;
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ball_x>
	ball_y = BALL_START_Y;
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <ball_y>
	
	srand(get_current_time());
     830:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     834:	cb 01       	movw	r24, r22
     836:	0e 94 9f 0c 	call	0x193e	; 0x193e <srand>
	
	rand_x_direction();
     83a:	0e 94 a4 03 	call	0x748	; 0x748 <rand_x_direction>
	rand_y_direction();
     83e:	0e 94 b0 03 	call	0x760	; 0x760 <rand_y_direction>
	/*
	ball_x_direction = LEFT;
	ball_y_direction = UP; */
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ball_y>
     848:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ball_x>
     84c:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
     850:	08 95       	ret

00000852 <erase_player_paddle>:
		update_square_colour(player_x, y, PLAYER);
	}
}

// Erase the pixels of player 1 or 2 from the display.
void erase_player_paddle(uint8_t player_to_draw) {
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	e0 5c       	subi	r30, 0xC0	; 192
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	f0 80       	ld	r15, Z
	int8_t player_y = player_y_coordinates[player_to_draw];
     866:	fc 01       	movw	r30, r24
     868:	e3 5b       	subi	r30, 0xB3	; 179
     86a:	fe 4f       	sbci	r31, 0xFE	; 254
     86c:	00 81       	ld	r16, Z

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     86e:	00 2e       	mov	r0, r16
     870:	00 0c       	add	r0, r0
     872:	11 0b       	sbc	r17, r17
     874:	e8 01       	movw	r28, r16
     876:	06 c0       	rjmp	.+12     	; 0x884 <erase_player_paddle+0x32>
		update_square_colour(player_x, y, EMPTY_SQUARE);
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	6c 2f       	mov	r22, r28
     87c:	8f 2d       	mov	r24, r15
     87e:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
// Erase the pixels of player 1 or 2 from the display.
void erase_player_paddle(uint8_t player_to_draw) {
	int8_t player_x = PLAYER_X_COORDINATES[player_to_draw];
	int8_t player_y = player_y_coordinates[player_to_draw];

	for (int y = player_y; y < player_y + PLAYER_HEIGHT; y++) {
     882:	21 96       	adiw	r28, 0x01	; 1
     884:	c8 01       	movw	r24, r16
     886:	02 96       	adiw	r24, 0x02	; 2
     888:	c8 17       	cp	r28, r24
     88a:	d9 07       	cpc	r29, r25
     88c:	ac f3       	brlt	.-22     	; 0x878 <erase_player_paddle+0x26>
		update_square_colour(player_x, y, EMPTY_SQUARE);
	}
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	08 95       	ret

0000089a <move_player_paddle>:

void move_player_paddle(int8_t player, int8_t direction) {
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	 int8_t new_player_position;
	 new_player_position = player_y_coordinates[player] + direction;
     8a2:	08 2f       	mov	r16, r24
     8a4:	08 2e       	mov	r0, r24
     8a6:	00 0c       	add	r0, r0
     8a8:	11 0b       	sbc	r17, r17
     8aa:	f8 01       	movw	r30, r16
     8ac:	e3 5b       	subi	r30, 0xB3	; 179
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	c0 81       	ld	r28, Z
     8b2:	c6 0f       	add	r28, r22
     8b4:	9c 2f       	mov	r25, r28
	 // Checks if the ball is in the same location as the new_player_position
	 if ((((ball_x == 0) & (ball_y == new_player_position)) | ((ball_x == 0) & (ball_y == new_player_position + 1))) 
     8b6:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <ball_x>
     8ba:	e1 e0       	ldi	r30, 0x01	; 1
     8bc:	21 11       	cpse	r18, r1
     8be:	e0 e0       	ldi	r30, 0x00	; 0
	 | (((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position)) | ((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position + 1)))) {
     8c0:	31 e0       	ldi	r19, 0x01	; 1
     8c2:	2b 30       	cpi	r18, 0x0B	; 11
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <move_player_paddle+0x2e>
     8c6:	30 e0       	ldi	r19, 0x00	; 0

void move_player_paddle(int8_t player, int8_t direction) {
	 int8_t new_player_position;
	 new_player_position = player_y_coordinates[player] + direction;
	 // Checks if the ball is in the same location as the new_player_position
	 if ((((ball_x == 0) & (ball_y == new_player_position)) | ((ball_x == 0) & (ball_y == new_player_position + 1))) 
     8c8:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <ball_y>
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	94 13       	cpse	r25, r20
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	6c 2f       	mov	r22, r28
     8d4:	0c 2e       	mov	r0, r28
     8d6:	00 0c       	add	r0, r0
     8d8:	77 0b       	sbc	r23, r23
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	04 2e       	mov	r0, r20
     8e0:	00 0c       	add	r0, r0
     8e2:	55 0b       	sbc	r21, r21
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	46 17       	cp	r20, r22
     8e8:	57 07       	cpc	r21, r23
     8ea:	09 f0       	breq	.+2      	; 0x8ee <move_player_paddle+0x54>
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 2b       	or	r18, r25
	 | (((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position)) | ((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position + 1)))) {
     8f0:	9e 2f       	mov	r25, r30
     8f2:	93 2b       	or	r25, r19
     8f4:	92 23       	and	r25, r18

void move_player_paddle(int8_t player, int8_t direction) {
	 int8_t new_player_position;
	 new_player_position = player_y_coordinates[player] + direction;
	 // Checks if the ball is in the same location as the new_player_position
	 if ((((ball_x == 0) & (ball_y == new_player_position)) | ((ball_x == 0) & (ball_y == new_player_position + 1))) 
     8f6:	61 f4       	brne	.+24     	; 0x910 <__stack+0x11>
	 | (((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position)) | ((ball_x == BOARD_WIDTH - 1) & (ball_y == new_player_position + 1)))) {
		// Do Nothing
		;
	 } else {
		 // Allows the player to move as long as the new position does not go out of bounds
		 if ((new_player_position >= 0) & (new_player_position < (BOARD_HEIGHT - 1))) {
     8f8:	c7 30       	cpi	r28, 0x07	; 7
     8fa:	50 f4       	brcc	.+20     	; 0x910 <__stack+0x11>
     8fc:	d8 2f       	mov	r29, r24
			 erase_player_paddle(player);
     8fe:	0e 94 29 04 	call	0x852	; 0x852 <erase_player_paddle>
			 player_y_coordinates[player] = new_player_position;
     902:	f8 01       	movw	r30, r16
     904:	e3 5b       	subi	r30, 0xB3	; 179
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	c0 83       	st	Z, r28
			 draw_player_paddle(player);
     90a:	8d 2f       	mov	r24, r29
     90c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <draw_player_paddle>
		 }
	 }
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <update_ball_position>:

// Update ball position based on current x direction and y direction of ball
void update_ball_position(void) {
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
	
	// Determine new ball coordinates
	int8_t new_ball_x = ball_x + ball_x_direction;
     920:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <ball_x>
     924:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ball_x_direction>
     928:	18 0f       	add	r17, r24
	int8_t new_ball_y = ball_y + ball_y_direction;
     92a:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <ball_y>
     92e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ball_y_direction>
     932:	9d 2f       	mov	r25, r29
     934:	98 0f       	add	r25, r24
	if ((new_ball_y < 0) | (new_ball_y > BOARD_HEIGHT - 1)) {
     936:	98 30       	cpi	r25, 0x08	; 8
     938:	28 f0       	brcs	.+10     	; 0x944 <update_ball_position+0x2a>
		ball_y_direction *= -1;
     93a:	81 95       	neg	r24
     93c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <ball_y_direction>
		new_ball_y = ball_y + ball_y_direction;
     940:	d8 0f       	add	r29, r24
     942:	01 c0       	rjmp	.+2      	; 0x946 <update_ball_position+0x2c>
	} else {
	new_ball_y = ball_y + ball_y_direction;
     944:	d9 2f       	mov	r29, r25
	}
	
	// Reset Ball for wall contact/Scoring
	// ------- RESET PADDLE? --------
	// Player 2 Score
	if ((new_ball_x < 0 )){
     946:	11 23       	and	r17, r17
     948:	0c f0       	brlt	.+2      	; 0x94c <update_ball_position+0x32>
     94a:	3f c0       	rjmp	.+126    	; 0x9ca <update_ball_position+0xb0>
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
		new_ball_y = BALL_START_Y;
		/*ball_y_direction = 0;
		ball_x_direction = 0;*/
		rand_x_direction();
     94c:	0e 94 a4 03 	call	0x748	; 0x748 <rand_x_direction>
		rand_y_direction();
     950:	0e 94 b0 03 	call	0x760	; 0x760 <rand_y_direction>
		// Increase Player 2 Score
		p2score += 1;
     954:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <p2score>
     958:	8f 5f       	subi	r24, 0xFF	; 255
     95a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <p2score>
		move_terminal_cursor(66,10);
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	82 e4       	ldi	r24, 0x42	; 66
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
		printf_P(PSTR("%d"), p2score);
     96a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <p2score>
     96e:	28 2f       	mov	r18, r24
     970:	08 2e       	mov	r0, r24
     972:	00 0c       	add	r0, r0
     974:	33 0b       	sbc	r19, r19
     976:	3f 93       	push	r19
     978:	8f 93       	push	r24
     97a:	8f e7       	ldi	r24, 0x7F	; 127
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
		// Reset Rally Count
		p1rally = 0;
     986:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <p1rally>
		p2rally = 0;
     98a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <p2rally>
		ledmatrix_update_pixel(0, 0, COLOUR_BLACK);
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(15, 0, COLOUR_BLACK);
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	8f e0       	ldi	r24, 0x0F	; 15
     99e:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		for (int8_t y = 0; y += 1;) {
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <update_ball_position+0xa8>
			ledmatrix_update_pixel(0, y, COLOUR_BLACK);
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	6c 2f       	mov	r22, r28
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
			ledmatrix_update_pixel(15, y, COLOUR_BLACK);
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	6c 2f       	mov	r22, r28
     9bc:	8f e0       	ldi	r24, 0x0F	; 15
     9be:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		// Reset Rally Count
		p1rally = 0;
		p2rally = 0;
		ledmatrix_update_pixel(0, 0, COLOUR_BLACK);
		ledmatrix_update_pixel(15, 0, COLOUR_BLACK);
		for (int8_t y = 0; y += 1;) {
     9c2:	cf 5f       	subi	r28, 0xFF	; 255
     9c4:	a1 f7       	brne	.-24     	; 0x9ae <update_ball_position+0x94>
	// ------- RESET PADDLE? --------
	// Player 2 Score
	if ((new_ball_x < 0 )){
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
		new_ball_y = BALL_START_Y;
     9c6:	d4 e0       	ldi	r29, 0x04	; 4
	// Reset Ball for wall contact/Scoring
	// ------- RESET PADDLE? --------
	// Player 2 Score
	if ((new_ball_x < 0 )){
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
     9c8:	15 e0       	ldi	r17, 0x05	; 5
			ledmatrix_update_pixel(15, y, COLOUR_BLACK);
		}
	
	}
	// Player 1 Score
	if ((new_ball_x >= BOARD_WIDTH)) {
     9ca:	1c 30       	cpi	r17, 0x0C	; 12
     9cc:	0c f4       	brge	.+2      	; 0x9d0 <update_ball_position+0xb6>
     9ce:	3f c0       	rjmp	.+126    	; 0xa4e <update_ball_position+0x134>
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
		new_ball_y = BALL_START_Y;
		/*ball_y_direction = 0;
		ball_x_direction = 1;*/
		rand_x_direction();
     9d0:	0e 94 a4 03 	call	0x748	; 0x748 <rand_x_direction>
		rand_y_direction();
     9d4:	0e 94 b0 03 	call	0x760	; 0x760 <rand_y_direction>
		// Increase Player 1 Score
		p1score += 1;
     9d8:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <p1score>
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <p1score>
		move_terminal_cursor(26,10);
     9e2:	6a e0       	ldi	r22, 0x0A	; 10
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	8a e1       	ldi	r24, 0x1A	; 26
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
		printf_P(PSTR("%d"), p1score);
     9ee:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <p1score>
     9f2:	28 2f       	mov	r18, r24
     9f4:	08 2e       	mov	r0, r24
     9f6:	00 0c       	add	r0, r0
     9f8:	33 0b       	sbc	r19, r19
     9fa:	3f 93       	push	r19
     9fc:	8f 93       	push	r24
     9fe:	8c e7       	ldi	r24, 0x7C	; 124
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
		// Reset Rally Count
		p1rally = 0;
     a0a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <p1rally>
		p2rally = 0;
     a0e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <p2rally>
		ledmatrix_update_pixel(0, 0, COLOUR_BLACK);
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		ledmatrix_update_pixel(15, 0, COLOUR_BLACK);
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	8f e0       	ldi	r24, 0x0F	; 15
     a22:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		for (int8_t y = 0; y += 1;) {
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	0a c0       	rjmp	.+20     	; 0xa46 <update_ball_position+0x12c>
			ledmatrix_update_pixel(0, y, COLOUR_BLACK);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	6c 2f       	mov	r22, r28
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
			ledmatrix_update_pixel(15, y, COLOUR_BLACK);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	6c 2f       	mov	r22, r28
     a40:	8f e0       	ldi	r24, 0x0F	; 15
     a42:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		// Reset Rally Count
		p1rally = 0;
		p2rally = 0;
		ledmatrix_update_pixel(0, 0, COLOUR_BLACK);
		ledmatrix_update_pixel(15, 0, COLOUR_BLACK);
		for (int8_t y = 0; y += 1;) {
     a46:	cf 5f       	subi	r28, 0xFF	; 255
     a48:	a1 f7       	brne	.-24     	; 0xa32 <update_ball_position+0x118>
	}
	// Player 1 Score
	if ((new_ball_x >= BOARD_WIDTH)) {
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
		new_ball_y = BALL_START_Y;
     a4a:	d4 e0       	ldi	r29, 0x04	; 4
	
	}
	// Player 1 Score
	if ((new_ball_x >= BOARD_WIDTH)) {
		// Reset Ball Properties
		new_ball_x = BALL_START_X;
     a4c:	15 e0       	ldi	r17, 0x05	; 5
	}
	
	
	// Paddle Bouncin'
	// Player 1
	if ((new_ball_x == PLAYER_X_COORDINATES[0]) & ((new_ball_y == player_y_coordinates[PLAYER_1]) | (new_ball_y == player_y_coordinates[PLAYER_1] + 1))) {
     a4e:	71 e0       	ldi	r23, 0x01	; 1
     a50:	11 11       	cpse	r17, r1
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <player_y_coordinates>
     a58:	29 2f       	mov	r18, r25
     a5a:	09 2e       	mov	r0, r25
     a5c:	00 0c       	add	r0, r0
     a5e:	33 0b       	sbc	r19, r19
     a60:	2f 5f       	subi	r18, 0xFF	; 255
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	d9 13       	cpse	r29, r25
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	4d 2f       	mov	r20, r29
     a6e:	0d 2e       	mov	r0, r29
     a70:	00 0c       	add	r0, r0
     a72:	55 0b       	sbc	r21, r21
     a74:	42 17       	cp	r20, r18
     a76:	53 07       	cpc	r21, r19
     a78:	09 f0       	breq	.+2      	; 0xa7c <update_ball_position+0x162>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	86 2b       	or	r24, r22
     a7e:	77 23       	and	r23, r23
     a80:	b9 f1       	breq	.+110    	; 0xaf0 <update_ball_position+0x1d6>
     a82:	88 23       	and	r24, r24
     a84:	a9 f1       	breq	.+106    	; 0xaf0 <update_ball_position+0x1d6>
		rand_y_direction();
     a86:	0e 94 b0 03 	call	0x760	; 0x760 <rand_y_direction>
		ball_x_direction *= -1;
     a8a:	10 91 5c 01 	lds	r17, 0x015C	; 0x80015c <ball_x_direction>
     a8e:	81 2f       	mov	r24, r17
     a90:	81 95       	neg	r24
     a92:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ball_x_direction>
		new_ball_x = ball_x + ball_x_direction;
     a96:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <ball_x>
     a9a:	18 0f       	add	r17, r24
		new_ball_y = ball_y + ball_y_direction;
     a9c:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <ball_y>
     aa0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ball_y_direction>
     aa4:	d8 0f       	add	r29, r24
		p1rally += 1;
     aa6:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <p1rally>
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	96 0f       	add	r25, r22
     aae:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <p1rally>
		if (p1rally % 9 != 0) {
     ab2:	89 e3       	ldi	r24, 0x39	; 57
     ab4:	98 02       	muls	r25, r24
     ab6:	81 2d       	mov	r24, r1
     ab8:	11 24       	eor	r1, r1
     aba:	85 95       	asr	r24
     abc:	97 fd       	sbrc	r25, 7
     abe:	83 95       	inc	r24
     ac0:	28 2f       	mov	r18, r24
     ac2:	22 0f       	add	r18, r18
     ac4:	22 0f       	add	r18, r18
     ac6:	22 0f       	add	r18, r18
     ac8:	82 0f       	add	r24, r18
     aca:	98 17       	cp	r25, r24
     acc:	29 f0       	breq	.+10     	; 0xad8 <update_ball_position+0x1be>
			ledmatrix_update_pixel(0, p1rally - 1, COLOUR_RALLY);	
     ace:	49 ea       	ldi	r20, 0xA9	; 169
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <update_ball_position+0x1d6>
		} else {
			p1rally = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <p1rally>
			for (int8_t y = 0; y += 1;) {
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <update_ball_position+0x1d2>
				//printf_P(PSTR("%d"), y);
				ledmatrix_update_pixel(0, y, COLOUR_BLACK);	
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	6c 2f       	mov	r22, r28
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		p1rally += 1;
		if (p1rally % 9 != 0) {
			ledmatrix_update_pixel(0, p1rally - 1, COLOUR_RALLY);	
		} else {
			p1rally = 1;
			for (int8_t y = 0; y += 1;) {
     aec:	cf 5f       	subi	r28, 0xFF	; 255
     aee:	c9 f7       	brne	.-14     	; 0xae2 <update_ball_position+0x1c8>
				ledmatrix_update_pixel(0, y, COLOUR_BLACK);	
			}
		}
	}
	// Player 2
	if ((new_ball_x == PLAYER_X_COORDINATES[1]) & ((new_ball_y == player_y_coordinates[PLAYER_2]) | (new_ball_y == player_y_coordinates[PLAYER_2] + 1))) {
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	1b 30       	cpi	r17, 0x0B	; 11
     af4:	09 f0       	breq	.+2      	; 0xaf8 <update_ball_position+0x1de>
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <player_y_coordinates+0x1>
     afc:	29 2f       	mov	r18, r25
     afe:	09 2e       	mov	r0, r25
     b00:	00 0c       	add	r0, r0
     b02:	33 0b       	sbc	r19, r19
     b04:	2f 5f       	subi	r18, 0xFF	; 255
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	d9 13       	cpse	r29, r25
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	4d 2f       	mov	r20, r29
     b12:	0d 2e       	mov	r0, r29
     b14:	00 0c       	add	r0, r0
     b16:	55 0b       	sbc	r21, r21
     b18:	42 17       	cp	r20, r18
     b1a:	53 07       	cpc	r21, r19
     b1c:	09 f0       	breq	.+2      	; 0xb20 <update_ball_position+0x206>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	87 2b       	or	r24, r23
     b22:	66 23       	and	r22, r22
     b24:	b9 f1       	breq	.+110    	; 0xb94 <update_ball_position+0x27a>
     b26:	88 23       	and	r24, r24
     b28:	a9 f1       	breq	.+106    	; 0xb94 <update_ball_position+0x27a>
		rand_y_direction();
     b2a:	0e 94 b0 03 	call	0x760	; 0x760 <rand_y_direction>
		ball_x_direction *= -1;
     b2e:	10 91 5c 01 	lds	r17, 0x015C	; 0x80015c <ball_x_direction>
     b32:	81 2f       	mov	r24, r17
     b34:	81 95       	neg	r24
     b36:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <ball_x_direction>
		new_ball_x = ball_x + ball_x_direction;
     b3a:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <ball_x>
     b3e:	18 0f       	add	r17, r24
		new_ball_y = ball_y + ball_y_direction;
     b40:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <ball_y>
     b44:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <ball_y_direction>
     b48:	d8 0f       	add	r29, r24
		p2rally += 1;
     b4a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <p2rally>
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	96 0f       	add	r25, r22
     b52:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <p2rally>
		if (p2rally % 9 != 0) {
     b56:	89 e3       	ldi	r24, 0x39	; 57
     b58:	98 02       	muls	r25, r24
     b5a:	81 2d       	mov	r24, r1
     b5c:	11 24       	eor	r1, r1
     b5e:	85 95       	asr	r24
     b60:	97 fd       	sbrc	r25, 7
     b62:	83 95       	inc	r24
     b64:	28 2f       	mov	r18, r24
     b66:	22 0f       	add	r18, r18
     b68:	22 0f       	add	r18, r18
     b6a:	22 0f       	add	r18, r18
     b6c:	82 0f       	add	r24, r18
     b6e:	98 17       	cp	r25, r24
     b70:	29 f0       	breq	.+10     	; 0xb7c <update_ball_position+0x262>
			ledmatrix_update_pixel(15, p2rally - 1, COLOUR_RALLY);
     b72:	49 ea       	ldi	r20, 0xA9	; 169
     b74:	8f e0       	ldi	r24, 0x0F	; 15
     b76:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
     b7a:	0c c0       	rjmp	.+24     	; 0xb94 <update_ball_position+0x27a>
			} else {
			p2rally = 1;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <p2rally>
			for (int8_t y = 0; y += 1;) {
     b82:	c0 e0       	ldi	r28, 0x00	; 0
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <update_ball_position+0x276>
				// int8_t y = 0; y += 1;
				//int8_t y = 0; y < 9; y++
				// why work
				ledmatrix_update_pixel(15, y, COLOUR_BLACK);
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	6c 2f       	mov	r22, r28
     b8a:	8f e0       	ldi	r24, 0x0F	; 15
     b8c:	0e 94 16 06 	call	0xc2c	; 0xc2c <ledmatrix_update_pixel>
		p2rally += 1;
		if (p2rally % 9 != 0) {
			ledmatrix_update_pixel(15, p2rally - 1, COLOUR_RALLY);
			} else {
			p2rally = 1;
			for (int8_t y = 0; y += 1;) {
     b90:	cf 5f       	subi	r28, 0xFF	; 255
     b92:	c9 f7       	brne	.-14     	; 0xb86 <update_ball_position+0x26c>
				ledmatrix_update_pixel(15, y, COLOUR_BLACK);
			}
		}
	}
	// Erase old ball
	update_square_colour(ball_x, ball_y, EMPTY_SQUARE);
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <ball_y>
     b9a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <ball_x>
     b9e:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
	
	// Assign new ball coordinates
	ball_x = new_ball_x;
     ba2:	10 93 5b 01 	sts	0x015B, r17	; 0x80015b <ball_x>
	ball_y = new_ball_y;
     ba6:	d0 93 59 01 	sts	0x0159, r29	; 0x800159 <ball_y>
	
	// Draw new ball
	update_square_colour(ball_x, ball_y, BALL);
     baa:	42 e0       	ldi	r20, 0x02	; 2
     bac:	6d 2f       	mov	r22, r29
     bae:	81 2f       	mov	r24, r17
     bb0:	0e 94 99 02 	call	0x532	; 0x532 <update_square_colour>
}
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	08 95       	ret

00000bbc <seven_seg_dis>:
	return 0;
}

// Function for SSD
void seven_seg_dis(void) {
	seven_seg_cc = 1 - seven_seg_cc;
     bbc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <seven_seg_cc>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	89 1b       	sub	r24, r25
     bc4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <seven_seg_cc>
	PORTD ^= (1<<2);
     bc8:	9b b1       	in	r25, 0x0b	; 11
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	89 27       	eor	r24, r25
     bce:	8b b9       	out	0x0b, r24	; 11
	if (seven_seg_cc == 0) {
     bd0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <seven_seg_cc>
     bd4:	81 11       	cpse	r24, r1
     bd6:	0a c0       	rjmp	.+20     	; 0xbec <seven_seg_dis+0x30>
		PORTC = seven_seg_data[p2score];
     bd8:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <p2score>
     bdc:	0e 2e       	mov	r0, r30
     bde:	00 0c       	add	r0, r0
     be0:	ff 0b       	sbc	r31, r31
     be2:	ec 5f       	subi	r30, 0xFC	; 252
     be4:	fe 4f       	sbci	r31, 0xFE	; 254
     be6:	80 81       	ld	r24, Z
     be8:	88 b9       	out	0x08, r24	; 8
     bea:	08 95       	ret
		} else {
		PORTC = seven_seg_data[p1score];
     bec:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <p1score>
     bf0:	0e 2e       	mov	r0, r30
     bf2:	00 0c       	add	r0, r0
     bf4:	ff 0b       	sbc	r31, r31
     bf6:	ec 5f       	subi	r30, 0xFC	; 252
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	80 81       	ld	r24, Z
     bfc:	88 b9       	out	0x08, r24	; 8
     bfe:	08 95       	ret

00000c00 <is_game_over>:
	update_square_colour(ball_x, ball_y, BALL);
}

// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
	if (p1score == 9) {
     c00:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <p1score>
     c04:	89 30       	cpi	r24, 0x09	; 9
     c06:	21 f4       	brne	.+8      	; 0xc10 <is_game_over+0x10>
		seven_seg_dis();
     c08:	0e 94 de 05 	call	0xbbc	; 0xbbc <seven_seg_dis>
		return 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret
	}
	if (p2score == 9) {
     c10:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <p2score>
     c14:	89 30       	cpi	r24, 0x09	; 9
     c16:	21 f4       	brne	.+8      	; 0xc20 <is_game_over+0x20>
		seven_seg_dis();
     c18:	0e 94 de 05 	call	0xbbc	; 0xbbc <seven_seg_dis>
		return 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	08 95       	ret
	}
	// Detect if the game is over i.e. if a player has won.
	return 0;
     c20:	80 e0       	ldi	r24, 0x00	; 0
}
     c22:	08 95       	ret

00000c24 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     c24:	80 e8       	ldi	r24, 0x80	; 128
     c26:	0e 94 33 0b 	call	0x1666	; 0x1666 <spi_setup_master>
     c2a:	08 95       	ret

00000c2c <ledmatrix_update_pixel>:
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	80 31       	cpi	r24, 0x10	; 16
     c34:	b0 f4       	brcc	.+44     	; 0xc62 <ledmatrix_update_pixel+0x36>
     c36:	68 30       	cpi	r22, 0x08	; 8
     c38:	a0 f4       	brcc	.+40     	; 0xc62 <ledmatrix_update_pixel+0x36>
     c3a:	14 2f       	mov	r17, r20
     c3c:	c6 2f       	mov	r28, r22
     c3e:	d8 2f       	mov	r29, r24
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c46:	6c 2f       	mov	r22, r28
     c48:	67 70       	andi	r22, 0x07	; 7
     c4a:	80 e1       	ldi	r24, 0x10	; 16
     c4c:	68 9f       	mul	r22, r24
     c4e:	90 01       	movw	r18, r0
     c50:	11 24       	eor	r1, r1
     c52:	8d 2f       	mov	r24, r29
     c54:	8f 70       	andi	r24, 0x0F	; 15
     c56:	82 2b       	or	r24, r18
     c58:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c5c:	81 2f       	mov	r24, r17
     c5e:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	08 95       	ret

00000c6a <ledmatrix_update_column>:
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
     c6e:	cf 93       	push	r28
     c70:	80 31       	cpi	r24, 0x10	; 16
     c72:	a0 f4       	brcc	.+40     	; 0xc9c <ledmatrix_update_column+0x32>
     c74:	8b 01       	movw	r16, r22
     c76:	c8 2f       	mov	r28, r24
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c7e:	8c 2f       	mov	r24, r28
     c80:	8f 70       	andi	r24, 0x0F	; 15
     c82:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <ledmatrix_update_column+0x2e>
     c8a:	f8 01       	movw	r30, r16
     c8c:	ec 0f       	add	r30, r28
     c8e:	f1 1d       	adc	r31, r1
     c90:	80 81       	ld	r24, Z
     c92:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     c96:	cf 5f       	subi	r28, 0xFF	; 255
     c98:	c8 30       	cpi	r28, 0x08	; 8
     c9a:	b8 f3       	brcs	.-18     	; 0xc8a <ledmatrix_update_column+0x20>
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     ca4:	8f e0       	ldi	r24, 0x0F	; 15
     ca6:	0e 94 5f 0b 	call	0x16be	; 0x16be <spi_send_byte>
     caa:	08 95       	ret

00000cac <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     cac:	0e 94 12 06 	call	0xc24	; 0xc24 <ledmatrix_setup>
	init_button_interrupts();
     cb0:	0e 94 cc 00 	call	0x198	; 0x198 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	7b e4       	ldi	r23, 0x4B	; 75
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 4b 0a 	call	0x1496	; 0x1496 <init_serial_stdio>
	
	init_timer0();
     cc2:	0e 94 88 0b 	call	0x1710	; 0x1710 <init_timer0>
	// SSD
	DDRC = 0xFF;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << 2);
     cca:	8a b1       	in	r24, 0x0a	; 10
     ccc:	84 60       	ori	r24, 0x04	; 4
     cce:	8a b9       	out	0x0a, r24	; 10
	// Turn on global interrupts
	sei();
     cd0:	78 94       	sei
     cd2:	08 95       	ret

00000cd4 <start_screen>:
}

void start_screen(void) {
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	cf 93       	push	r28
	// Clear terminal screen and output a message
	clear_terminal();
     ce6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear_terminal>
	show_cursor();
     cea:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <show_cursor>
	move_terminal_cursor(10,10);
     cee:	6a e0       	ldi	r22, 0x0A	; 10
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	8a e0       	ldi	r24, 0x0A	; 10
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("PONG"));
     cfa:	8f e3       	ldi	r24, 0x3F	; 63
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	move_terminal_cursor(10,12);
     d06:	6c e0       	ldi	r22, 0x0C	; 12
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by Benjamin Burn - 45507087"));
     d12:	82 e1       	ldi	r24, 0x12	; 18
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
     d1e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
     d22:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     d26:	4b 01       	movw	r8, r22
     d28:	5c 01       	movw	r10, r24
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
	
	uint8_t frame_number = 0;
     d32:	c0 e0       	ldi	r28, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
     d34:	0e 94 92 0a 	call	0x1524	; 0x1524 <serial_input_available>
     d38:	88 23       	and	r24, r24
     d3a:	39 f0       	breq	.+14     	; 0xd4a <start_screen+0x76>
			serial_input = fgetc(stdin);
     d3c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob>
     d40:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x1>
     d44:	0e 94 aa 0c 	call	0x1954	; 0x1954 <fgetc>
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <start_screen+0x78>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
     d4c:	83 37       	cpi	r24, 0x73	; 115
     d4e:	19 f1       	breq	.+70     	; 0xd96 <start_screen+0xc2>
     d50:	83 35       	cpi	r24, 0x53	; 83
     d52:	09 f1       	breq	.+66     	; 0xd96 <start_screen+0xc2>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
     d54:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
     d58:	8f 3f       	cpi	r24, 0xFF	; 255
     d5a:	e9 f4       	brne	.+58     	; 0xd96 <start_screen+0xc2>
			break;
		}

		current_time = get_current_time();
     d5c:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     d60:	6b 01       	movw	r12, r22
     d62:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > 500) {
     d64:	ab 01       	movw	r20, r22
     d66:	bc 01       	movw	r22, r24
     d68:	48 19       	sub	r20, r8
     d6a:	59 09       	sbc	r21, r9
     d6c:	6a 09       	sbc	r22, r10
     d6e:	7b 09       	sbc	r23, r11
     d70:	45 3f       	cpi	r20, 0xF5	; 245
     d72:	51 40       	sbci	r21, 0x01	; 1
     d74:	61 05       	cpc	r22, r1
     d76:	71 05       	cpc	r23, r1
     d78:	e8 f2       	brcs	.-70     	; 0xd34 <start_screen+0x60>
			update_start_screen(frame_number);
     d7a:	8c 2f       	mov	r24, r28
     d7c:	0e 94 1d 02 	call	0x43a	; 0x43a <update_start_screen>
			frame_number = (frame_number + 1) % 12;
     d80:	8c 2f       	mov	r24, r28
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	6c e0       	ldi	r22, 0x0C	; 12
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__divmodhi4>
     d8e:	c8 2f       	mov	r28, r24
			last_screen_update = current_time;
     d90:	46 01       	movw	r8, r12
     d92:	57 01       	movw	r10, r14
     d94:	cf cf       	rjmp	.-98     	; 0xd34 <start_screen+0x60>
		}
	}
}
     d96:	cf 91       	pop	r28
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	bf 90       	pop	r11
     da2:	af 90       	pop	r10
     da4:	9f 90       	pop	r9
     da6:	8f 90       	pop	r8
     da8:	08 95       	ret

00000daa <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     daa:	0e 94 76 0b 	call	0x16ec	; 0x16ec <clear_terminal>
	
	// Initialise the game and display
	initialise_game();
     dae:	0e 94 f6 03 	call	0x7ec	; 0x7ec <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     db2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <button_pushed>
	clear_serial_input_buffer();
     db6:	0e 94 99 0a 	call	0x1532	; 0x1532 <clear_serial_input_buffer>
     dba:	08 95       	ret

00000dbc <handle_game_over>:
		is_game_over();
	}// main while loop
	// We get here if the game is over.
}

void handle_game_over() {
     dbc:	cf 93       	push	r28
	move_terminal_cursor(10,14);
     dbe:	6e e0       	ldi	r22, 0x0E	; 14
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	8a e0       	ldi	r24, 0x0A	; 10
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     dca:	8c eb       	ldi	r24, 0xBC	; 188
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	move_terminal_cursor(10,15);
     dd6:	6f e0       	ldi	r22, 0x0F	; 15
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
     de2:	8e e8       	ldi	r24, 0x8E	; 142
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9f 93       	push	r25
     de8:	8f 93       	push	r24
     dea:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED) {
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	22 c0       	rjmp	.+68     	; 0xe3c <handle_game_over+0x80>
		led_matrix_score();
     df8:	0e 94 a6 02 	call	0x54c	; 0x54c <led_matrix_score>
		if (serial_input_available()) {
     dfc:	0e 94 92 0a 	call	0x1524	; 0x1524 <serial_input_available>
     e00:	88 23       	and	r24, r24
     e02:	e1 f0       	breq	.+56     	; 0xe3c <handle_game_over+0x80>
			char serial_input = fgetc(stdin);
     e04:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob>
     e08:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x1>
     e0c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <fgetc>
			if ((serial_input == 's') | (serial_input == 'S') | (button_pushed() != NO_BUTTON_PUSHED)) {
     e10:	c1 e0       	ldi	r28, 0x01	; 1
     e12:	83 37       	cpi	r24, 0x73	; 115
     e14:	09 f0       	breq	.+2      	; 0xe18 <handle_game_over+0x5c>
     e16:	c0 e0       	ldi	r28, 0x00	; 0
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	83 35       	cpi	r24, 0x53	; 83
     e1c:	09 f0       	breq	.+2      	; 0xe20 <handle_game_over+0x64>
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	c9 2b       	or	r28, r25
     e22:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <button_pushed>
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	09 f4       	brne	.+2      	; 0xe2e <handle_game_over+0x72>
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	c1 11       	cpse	r28, r1
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <handle_game_over+0x7a>
     e32:	99 23       	and	r25, r25
     e34:	19 f0       	breq	.+6      	; 0xe3c <handle_game_over+0x80>
				start_screen();
     e36:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <start_screen>
				break;
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <handle_game_over+0x88>
	move_terminal_cursor(10,15);
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game
	while (button_pushed() == NO_BUTTON_PUSHED) {
     e3c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <button_pushed>
     e40:	8f 3f       	cpi	r24, 0xFF	; 255
     e42:	d1 f2       	breq	.-76     	; 0xdf8 <handle_game_over+0x3c>
				start_screen();
				break;
			}
		}
	}
}
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <pause_game>:

void pause_game(void) {
	while (1) {
		if (serial_input_available()) {
     e48:	0e 94 92 0a 	call	0x1524	; 0x1524 <serial_input_available>
     e4c:	88 23       	and	r24, r24
     e4e:	e1 f3       	breq	.-8      	; 0xe48 <pause_game>
			char serial_input = fgetc(stdin);
     e50:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob>
     e54:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x1>
     e58:	0e 94 aa 0c 	call	0x1954	; 0x1954 <fgetc>
			if ((serial_input == 'p') | (serial_input == 'P')) {
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	80 37       	cpi	r24, 0x70	; 112
     e60:	09 f0       	breq	.+2      	; 0xe64 <pause_game+0x1c>
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	80 35       	cpi	r24, 0x50	; 80
     e68:	09 f0       	breq	.+2      	; 0xe6c <pause_game+0x24>
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	92 2b       	or	r25, r18
     e6e:	61 f3       	breq	.-40     	; 0xe48 <pause_game>
				move_terminal_cursor(32,50);
     e70:	62 e3       	ldi	r22, 0x32	; 50
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
				printf_P(PSTR("           "));
     e7c:	82 e8       	ldi	r24, 0x82	; 130
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
				break;
			}
		}
	}
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	08 95       	ret

00000e8e <play_game>:
	clear_serial_input_buffer();
}



void play_game(void) {
     e8e:	2f 92       	push	r2
     e90:	3f 92       	push	r3
     e92:	4f 92       	push	r4
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	63 97       	sbiw	r28, 0x13	; 19
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
	int8_t button0_held_flag = 0;
	int8_t button1_held_flag = 0;
	int8_t button2_held_flag = 0;
	int8_t button3_held_flag = 0;
	// LED Matrix Score Display
	uint32_t led_matrix_score_time = get_current_time();
     ec2:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     ec6:	4b 01       	movw	r8, r22
     ec8:	5c 01       	movw	r10, r24
	uint32_t led_matrix_score_duration ;
	int8_t old_p1score = ret_player_1_score();
     eca:	0e 94 9e 03 	call	0x73c	; 0x73c <ret_player_1_score>
     ece:	08 2f       	mov	r16, r24
	int8_t old_p2score = ret_player_2_score();
     ed0:	0e 94 a1 03 	call	0x742	; 0x742 <ret_player_2_score>
     ed4:	89 83       	std	Y+1, r24	; 0x01
	int8_t new_p1score;
	int8_t new_p2score;
	int8_t break_lms_flag = 0;
	
	last_ball_move_time = get_current_time();
     ed6:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     eda:	6f 83       	std	Y+7, r22	; 0x07
     edc:	78 87       	std	Y+8, r23	; 0x08
     ede:	89 87       	std	Y+9, r24	; 0x09
     ee0:	9a 87       	std	Y+10, r25	; 0x0a
	// Scoring Set-up
	move_terminal_cursor(10,10);
     ee2:	6a e0       	ldi	r22, 0x0A	; 10
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	8a e0       	ldi	r24, 0x0A	; 10
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("Player 1 Score: 0"));
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	move_terminal_cursor(50,10);
     efa:	6a e0       	ldi	r22, 0x0A	; 10
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	82 e3       	ldi	r24, 0x32	; 50
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("Player 2 Score: 0"));
     f06:	8e ee       	ldi	r24, 0xEE	; 238
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	move_terminal_cursor(30,5);
     f12:	65 e0       	ldi	r22, 0x05	; 5
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	8e e1       	ldi	r24, 0x1E	; 30
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
	printf_P(PSTR("Game Speed: 500"));
     f1e:	8e ed       	ldi	r24, 0xDE	; 222
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9f 93       	push	r25
     f24:	8f 93       	push	r24
     f26:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
	printf_P(PSTR("get_current_time"));
	move_terminal_cursor(0,19);
	printf_P(PSTR("led_matrix_score_duration"));*/

	// We play the game until it's over
	while (!is_game_over()) {
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
	uint32_t led_matrix_score_duration ;
	int8_t old_p1score = ret_player_1_score();
	int8_t old_p2score = ret_player_2_score();
	int8_t new_p1score;
	int8_t new_p2score;
	int8_t break_lms_flag = 0;
     f36:	1a 82       	std	Y+2, r1	; 0x02
	int32_t last_button_time = -1;
	int8_t btn_released;
	int8_t button0_held_flag = 0;
	int8_t button1_held_flag = 0;
	int8_t button2_held_flag = 0;
	int8_t button3_held_flag = 0;
     f38:	1d 86       	std	Y+13, r1	; 0x0d
	int32_t auto_repeat_time;
	int32_t last_button_time = -1;
	int8_t btn_released;
	int8_t button0_held_flag = 0;
	int8_t button1_held_flag = 0;
	int8_t button2_held_flag = 0;
     f3a:	1c 86       	std	Y+12, r1	; 0x0c
	// Auto Repeat Button
	int32_t auto_repeat_time;
	int32_t last_button_time = -1;
	int8_t btn_released;
	int8_t button0_held_flag = 0;
	int8_t button1_held_flag = 0;
     f3c:	1b 86       	std	Y+11, r1	; 0x0b
	int32_t saved_time;
	// Auto Repeat Button
	int32_t auto_repeat_time;
	int32_t last_button_time = -1;
	int8_t btn_released;
	int8_t button0_held_flag = 0;
     f3e:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t btn; // The button pushed
	int32_t game_speed = 500;
	int32_t saved_time;
	// Auto Repeat Button
	int32_t auto_repeat_time;
	int32_t last_button_time = -1;
     f40:	22 24       	eor	r2, r2
     f42:	2a 94       	dec	r2
     f44:	32 2c       	mov	r3, r2
     f46:	21 01       	movw	r4, r2
void play_game(void) {
	
	uint32_t last_ball_move_time;
	uint32_t current_time = 0;
	uint8_t btn; // The button pushed
	int32_t game_speed = 500;
     f48:	24 ef       	ldi	r18, 0xF4	; 244
     f4a:	31 e0       	ldi	r19, 0x01	; 1
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	2e 87       	std	Y+14, r18	; 0x0e
     f52:	3f 87       	std	Y+15, r19	; 0x0f
     f54:	48 8b       	std	Y+16, r20	; 0x10
     f56:	59 8b       	std	Y+17, r21	; 0x11
     f58:	70 2e       	mov	r7, r16
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3a 8b       	std	Y+18, r19	; 0x12
	printf_P(PSTR("get_current_time"));
	move_terminal_cursor(0,19);
	printf_P(PSTR("led_matrix_score_duration"));*/

	// We play the game until it's over
	while (!is_game_over()) {
     f5e:	0c c2       	rjmp	.+1048   	; 0x1378 <play_game+0x4ea>
		// Checks if a button has been pushed. If so, creates a flag that a button is being held. 
		// If flag is 1 paddle moves in given direction while holding button.
		// If btn_released = btn_pushed() then paddle stops moving.
		
		// Auto Repeat Button
		auto_repeat_time = get_current_time() - last_button_time; 
     f60:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     f64:	6b 01       	movw	r12, r22
     f66:	7c 01       	movw	r14, r24
     f68:	c2 18       	sub	r12, r2
     f6a:	d3 08       	sbc	r13, r3
     f6c:	e4 08       	sbc	r14, r4
     f6e:	f5 08       	sbc	r15, r5
		btn = button_pushed();
     f70:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <button_pushed>
     f74:	18 2f       	mov	r17, r24
		btn_released = button_released();
     f76:	0e 94 04 01 	call	0x208	; 0x208 <button_released>
     f7a:	08 2f       	mov	r16, r24
		// LED Matrix Score Display
		new_p1score = ret_player_1_score();
     f7c:	0e 94 9e 03 	call	0x73c	; 0x73c <ret_player_1_score>
     f80:	8a 83       	std	Y+2, r24	; 0x02
		new_p2score = ret_player_2_score();
     f82:	0e 94 a1 03 	call	0x742	; 0x742 <ret_player_2_score>
     f86:	68 2e       	mov	r6, r24
		led_matrix_score_duration = get_current_time() - led_matrix_score_time;
     f88:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	88 19       	sub	r24, r8
     f92:	99 09       	sbc	r25, r9
     f94:	aa 09       	sbc	r26, r10
     f96:	bb 09       	sbc	r27, r11
		
		
		
		// works on first score but not second
		if ((new_p1score != old_p1score) | (new_p2score != old_p2score)) {
     f98:	31 e0       	ldi	r19, 0x01	; 1
     f9a:	4a 81       	ldd	r20, Y+2	; 0x02
     f9c:	74 12       	cpse	r7, r20
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <play_game+0x114>
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	59 81       	ldd	r21, Y+1	; 0x01
     fa6:	56 11       	cpse	r21, r6
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <play_game+0x11e>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	23 2b       	or	r18, r19
     fae:	69 f0       	breq	.+26     	; 0xfca <play_game+0x13c>
			led_matrix_score_time = get_current_time();
     fb0:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     fb4:	4b 01       	movw	r8, r22
     fb6:	5c 01       	movw	r10, r24
		//}
		
		//if (break_lms_flag == 1) {
			//printf_P(PSTR("%d"), break_lms_flag);
			led_matrix_score_duration = 0;
			led_matrix_score();
     fb8:	0e 94 a6 02 	call	0x54c	; 0x54c <led_matrix_score>
		
		// works on first score but not second
		if ((new_p1score != old_p1score) | (new_p2score != old_p2score)) {
			led_matrix_score_time = get_current_time();
			old_p1score = new_p1score;
			old_p2score = new_p2score;
     fbc:	69 82       	std	Y+1, r6	; 0x01
		
		
		// works on first score but not second
		if ((new_p1score != old_p1score) | (new_p2score != old_p2score)) {
			led_matrix_score_time = get_current_time();
			old_p1score = new_p1score;
     fbe:	7a 80       	ldd	r7, Y+2	; 0x02
			old_p2score = new_p2score;
			break_lms_flag = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8a 8b       	std	Y+18, r24	; 0x12
		//}
		
		//if (break_lms_flag == 1) {
			//printf_P(PSTR("%d"), break_lms_flag);
			led_matrix_score_duration = 0;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	dc 01       	movw	r26, r24
		printf_P(PSTR("%d"), get_current_time());
		
		move_terminal_cursor(32,19);
		printf_P(PSTR("%d"), led_matrix_score_duration);*/
		
		if ((break_lms_flag == 1) && (led_matrix_score_duration >= 1500)) {
     fca:	2a 89       	ldd	r18, Y+18	; 0x12
     fcc:	21 30       	cpi	r18, 0x01	; 1
     fce:	41 f4       	brne	.+16     	; 0xfe0 <play_game+0x152>
     fd0:	8c 3d       	cpi	r24, 0xDC	; 220
     fd2:	95 40       	sbci	r25, 0x05	; 5
     fd4:	a1 05       	cpc	r26, r1
     fd6:	b1 05       	cpc	r27, r1
     fd8:	18 f0       	brcs	.+6      	; 0xfe0 <play_game+0x152>
			led_matrix_score_clear();
     fda:	0e 94 6d 03 	call	0x6da	; 0x6da <led_matrix_score_clear>
			break_lms_flag = 0;
     fde:	1a 8a       	std	Y+18, r1	; 0x12
		}
		// If the score is not being displayed on the LED Matrix then the game will take inputs
		if (break_lms_flag == 0) {
     fe0:	4a 89       	ldd	r20, Y+18	; 0x12
     fe2:	41 11       	cpse	r20, r1
     fe4:	c7 c1       	rjmp	.+910    	; 0x1374 <play_game+0x4e6>
			// Ball Movement
			current_time = get_current_time();
     fe6:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
     fea:	6a 83       	std	Y+2, r22	; 0x02
     fec:	7b 83       	std	Y+3, r23	; 0x03
     fee:	8c 83       	std	Y+4, r24	; 0x04
     ff0:	9d 83       	std	Y+5, r25	; 0x05
			if (current_time >= last_ball_move_time + game_speed) {
     ff2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ff4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ff6:	a8 89       	ldd	r26, Y+16	; 0x10
     ff8:	b9 89       	ldd	r27, Y+17	; 0x11
     ffa:	2f 81       	ldd	r18, Y+7	; 0x07
     ffc:	38 85       	ldd	r19, Y+8	; 0x08
     ffe:	49 85       	ldd	r20, Y+9	; 0x09
    1000:	5a 85       	ldd	r21, Y+10	; 0x0a
    1002:	82 0f       	add	r24, r18
    1004:	93 1f       	adc	r25, r19
    1006:	a4 1f       	adc	r26, r20
    1008:	b5 1f       	adc	r27, r21
    100a:	2a 81       	ldd	r18, Y+2	; 0x02
    100c:	3b 81       	ldd	r19, Y+3	; 0x03
    100e:	4c 81       	ldd	r20, Y+4	; 0x04
    1010:	5d 81       	ldd	r21, Y+5	; 0x05
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	4a 07       	cpc	r20, r26
    1018:	5b 07       	cpc	r21, r27
    101a:	50 f0       	brcs	.+20     	; 0x1030 <play_game+0x1a2>
				// 500ms (0.5 second) has passed since the last time we move the
				// ball, so update the position of the ball based on current x
				// direction and y direction
				update_ball_position();
    101c:	0e 94 8d 04 	call	0x91a	; 0x91a <update_ball_position>
				
				// Update the most recent time the ball was moved
				last_ball_move_time = current_time;
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	ac 81       	ldd	r26, Y+4	; 0x04
    1026:	bd 81       	ldd	r27, Y+5	; 0x05
    1028:	8f 83       	std	Y+7, r24	; 0x07
    102a:	98 87       	std	Y+8, r25	; 0x08
    102c:	a9 87       	std	Y+9, r26	; 0x09
    102e:	ba 87       	std	Y+10, r27	; 0x0a
			}
			// Button 3
			if ((button3_held_flag == 1) && (auto_repeat_time >= 100)) {
    1030:	9d 85       	ldd	r25, Y+13	; 0x0d
    1032:	91 30       	cpi	r25, 0x01	; 1
    1034:	71 f4       	brne	.+28     	; 0x1052 <play_game+0x1c4>
    1036:	a4 e6       	ldi	r26, 0x64	; 100
    1038:	ca 16       	cp	r12, r26
    103a:	d1 04       	cpc	r13, r1
    103c:	e1 04       	cpc	r14, r1
    103e:	f1 04       	cpc	r15, r1
    1040:	44 f0       	brlt	.+16     	; 0x1052 <play_game+0x1c4>
				move_player_paddle(PLAYER_1, UP);
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    104a:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    104e:	1b 01       	movw	r2, r22
    1050:	2c 01       	movw	r4, r24
			}
			if (btn_released == BUTTON3_PUSHED) {
    1052:	03 30       	cpi	r16, 0x03	; 3
    1054:	09 f4       	brne	.+2      	; 0x1058 <play_game+0x1ca>
				button3_held_flag = 0;
    1056:	1d 86       	std	Y+13, r1	; 0x0d
			}
			if (btn == BUTTON3_PUSHED) {
    1058:	13 30       	cpi	r17, 0x03	; 3
    105a:	51 f4       	brne	.+20     	; 0x1070 <play_game+0x1e2>
				// If button 3 is pushed, move player 1 one space up
				button3_held_flag = 1;
				move_player_paddle(PLAYER_1, UP);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    1064:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    1068:	1b 01       	movw	r2, r22
    106a:	2c 01       	movw	r4, r24
			if (btn_released == BUTTON3_PUSHED) {
				button3_held_flag = 0;
			}
			if (btn == BUTTON3_PUSHED) {
				// If button 3 is pushed, move player 1 one space up
				button3_held_flag = 1;
    106c:	b1 e0       	ldi	r27, 0x01	; 1
    106e:	bd 87       	std	Y+13, r27	; 0x0d
				move_player_paddle(PLAYER_1, UP);
				last_button_time = get_current_time();
			}
			// Button 2
			if ((button2_held_flag == 1) && (auto_repeat_time >= 100)) {
    1070:	2c 85       	ldd	r18, Y+12	; 0x0c
    1072:	21 30       	cpi	r18, 0x01	; 1
    1074:	71 f4       	brne	.+28     	; 0x1092 <play_game+0x204>
    1076:	34 e6       	ldi	r19, 0x64	; 100
    1078:	c3 16       	cp	r12, r19
    107a:	d1 04       	cpc	r13, r1
    107c:	e1 04       	cpc	r14, r1
    107e:	f1 04       	cpc	r15, r1
    1080:	44 f0       	brlt	.+16     	; 0x1092 <play_game+0x204>
				move_player_paddle(PLAYER_1, DOWN);
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    108a:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    108e:	1b 01       	movw	r2, r22
    1090:	2c 01       	movw	r4, r24
			}
			if (btn_released == BUTTON2_PUSHED) {
    1092:	02 30       	cpi	r16, 0x02	; 2
    1094:	09 f4       	brne	.+2      	; 0x1098 <play_game+0x20a>
				button2_held_flag = 0;
    1096:	1c 86       	std	Y+12, r1	; 0x0c
			}
			if (btn == BUTTON2_PUSHED) {
    1098:	12 30       	cpi	r17, 0x02	; 2
    109a:	51 f4       	brne	.+20     	; 0x10b0 <play_game+0x222>
				// If button 2 is pushed, move player 1 one space down
				button2_held_flag = 1;
				move_player_paddle(PLAYER_1, DOWN);
    109c:	6f ef       	ldi	r22, 0xFF	; 255
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    10a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    10a8:	1b 01       	movw	r2, r22
    10aa:	2c 01       	movw	r4, r24
			if (btn_released == BUTTON2_PUSHED) {
				button2_held_flag = 0;
			}
			if (btn == BUTTON2_PUSHED) {
				// If button 2 is pushed, move player 1 one space down
				button2_held_flag = 1;
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	4c 87       	std	Y+12, r20	; 0x0c
				move_player_paddle(PLAYER_1, DOWN);
				last_button_time = get_current_time();
			}
			// Button 1
			if ((button1_held_flag == 1) && (auto_repeat_time >= 100)) {
    10b0:	5b 85       	ldd	r21, Y+11	; 0x0b
    10b2:	51 30       	cpi	r21, 0x01	; 1
    10b4:	71 f4       	brne	.+28     	; 0x10d2 <play_game+0x244>
    10b6:	84 e6       	ldi	r24, 0x64	; 100
    10b8:	c8 16       	cp	r12, r24
    10ba:	d1 04       	cpc	r13, r1
    10bc:	e1 04       	cpc	r14, r1
    10be:	f1 04       	cpc	r15, r1
    10c0:	44 f0       	brlt	.+16     	; 0x10d2 <play_game+0x244>
				move_player_paddle(PLAYER_2, UP);
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    10ca:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    10ce:	1b 01       	movw	r2, r22
    10d0:	2c 01       	movw	r4, r24
			}
			if (btn_released == BUTTON1_PUSHED) {
    10d2:	01 30       	cpi	r16, 0x01	; 1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <play_game+0x24a>
				button1_held_flag = 0;
    10d6:	1b 86       	std	Y+11, r1	; 0x0b
			}
			if (btn == BUTTON1_PUSHED) {
    10d8:	11 30       	cpi	r17, 0x01	; 1
    10da:	51 f4       	brne	.+20     	; 0x10f0 <play_game+0x262>
				// If button 1 is pushed, move player 2 one space up
				button1_held_flag = 1;
				move_player_paddle(PLAYER_2, UP);
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    10e4:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    10e8:	1b 01       	movw	r2, r22
    10ea:	2c 01       	movw	r4, r24
			if (btn_released == BUTTON1_PUSHED) {
				button1_held_flag = 0;
			}
			if (btn == BUTTON1_PUSHED) {
				// If button 1 is pushed, move player 2 one space up
				button1_held_flag = 1;
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9b 87       	std	Y+11, r25	; 0x0b
				move_player_paddle(PLAYER_2, UP);
				last_button_time = get_current_time();
			}
			// Button 0
			if ((button0_held_flag == 1) && (auto_repeat_time >= 100)) {
    10f0:	ae 81       	ldd	r26, Y+6	; 0x06
    10f2:	a1 30       	cpi	r26, 0x01	; 1
    10f4:	71 f4       	brne	.+28     	; 0x1112 <play_game+0x284>
    10f6:	b4 e6       	ldi	r27, 0x64	; 100
    10f8:	cb 16       	cp	r12, r27
    10fa:	d1 04       	cpc	r13, r1
    10fc:	e1 04       	cpc	r14, r1
    10fe:	f1 04       	cpc	r15, r1
    1100:	44 f0       	brlt	.+16     	; 0x1112 <play_game+0x284>
				move_player_paddle(PLAYER_2, DOWN);
    1102:	6f ef       	ldi	r22, 0xFF	; 255
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    110a:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    110e:	1b 01       	movw	r2, r22
    1110:	2c 01       	movw	r4, r24
			}
			if (btn_released == BUTTON0_PUSHED) {
    1112:	01 11       	cpse	r16, r1
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <play_game+0x28a>
				button0_held_flag = 0;
    1116:	1e 82       	std	Y+6, r1	; 0x06
			}
			if (btn == BUTTON0_PUSHED) {
    1118:	11 11       	cpse	r17, r1
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <play_game+0x2a2>
				// If button 0 is pushed, move player 1 one space up
				button0_held_flag = 1;
				move_player_paddle(PLAYER_2, DOWN);
    111c:	6f ef       	ldi	r22, 0xFF	; 255
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				last_button_time = get_current_time();
    1124:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    1128:	1b 01       	movw	r2, r22
    112a:	2c 01       	movw	r4, r24
			if (btn_released == BUTTON0_PUSHED) {
				button0_held_flag = 0;
			}
			if (btn == BUTTON0_PUSHED) {
				// If button 0 is pushed, move player 1 one space up
				button0_held_flag = 1;
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	2e 83       	std	Y+6, r18	; 0x06
				move_player_paddle(PLAYER_2, DOWN);
				last_button_time = get_current_time();
			}
			
			// Check Serial Inputs
			if (serial_input_available()) {
    1130:	0e 94 92 0a 	call	0x1524	; 0x1524 <serial_input_available>
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <play_game+0x2ac>
    1138:	1d c1       	rjmp	.+570    	; 0x1374 <play_game+0x4e6>
				char serial_input = fgetc(stdin);
    113a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <__iob>
    113e:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <__iob+0x1>
    1142:	0e 94 aa 0c 	call	0x1954	; 0x1954 <fgetc>
    1146:	8b 8b       	std	Y+19, r24	; 0x13
				if ((serial_input == 'w') | (serial_input == 'W')) {
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	87 37       	cpi	r24, 0x77	; 119
    114c:	09 f0       	breq	.+2      	; 0x1150 <play_game+0x2c2>
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	3b 89       	ldd	r19, Y+19	; 0x13
    1154:	37 35       	cpi	r19, 0x57	; 87
    1156:	09 f0       	breq	.+2      	; 0x115a <play_game+0x2cc>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	89 2b       	or	r24, r25
    115c:	21 f0       	breq	.+8      	; 0x1166 <play_game+0x2d8>
					move_player_paddle(PLAYER_1, UP);
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				}
				if ((serial_input == 's') | (serial_input == 'S') | (serial_input == 'd') | (serial_input == 'D')) {
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	4b 89       	ldd	r20, Y+19	; 0x13
    116a:	43 37       	cpi	r20, 0x73	; 115
    116c:	09 f0       	breq	.+2      	; 0x1170 <play_game+0x2e2>
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	5b 89       	ldd	r21, Y+19	; 0x13
    1174:	53 35       	cpi	r21, 0x53	; 83
    1176:	09 f0       	breq	.+2      	; 0x117a <play_game+0x2ec>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	98 2b       	or	r25, r24
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	ab 89       	ldd	r26, Y+19	; 0x13
    1180:	a4 36       	cpi	r26, 0x64	; 100
    1182:	09 f0       	breq	.+2      	; 0x1186 <play_game+0x2f8>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	bb 89       	ldd	r27, Y+19	; 0x13
    118a:	b4 34       	cpi	r27, 0x44	; 68
    118c:	09 f0       	breq	.+2      	; 0x1190 <play_game+0x302>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	89 2b       	or	r24, r25
    1192:	11 f4       	brne	.+4      	; 0x1198 <play_game+0x30a>
    1194:	22 23       	and	r18, r18
    1196:	21 f0       	breq	.+8      	; 0x11a0 <play_game+0x312>
					move_player_paddle(PLAYER_1, DOWN);
    1198:	6f ef       	ldi	r22, 0xFF	; 255
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				}
				if ((serial_input == 'o') | (serial_input == 'o')) {
    11a0:	2b 89       	ldd	r18, Y+19	; 0x13
    11a2:	2f 36       	cpi	r18, 0x6F	; 111
    11a4:	21 f4       	brne	.+8      	; 0x11ae <play_game+0x320>
					move_player_paddle(PLAYER_2, UP);
    11a6:	61 e0       	ldi	r22, 0x01	; 1
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				}
				if ((serial_input == 'k') | (serial_input == 'K') | (serial_input == 'l') | (serial_input == 'L')) {
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	3b 89       	ldd	r19, Y+19	; 0x13
    11b2:	3b 36       	cpi	r19, 0x6B	; 107
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <play_game+0x32a>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	4b 89       	ldd	r20, Y+19	; 0x13
    11bc:	4b 34       	cpi	r20, 0x4B	; 75
    11be:	09 f0       	breq	.+2      	; 0x11c2 <play_game+0x334>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	5b 89       	ldd	r21, Y+19	; 0x13
    11c8:	5c 36       	cpi	r21, 0x6C	; 108
    11ca:	09 f0       	breq	.+2      	; 0x11ce <play_game+0x340>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	21 e0       	ldi	r18, 0x01	; 1
    11d0:	ab 89       	ldd	r26, Y+19	; 0x13
    11d2:	ac 34       	cpi	r26, 0x4C	; 76
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <play_game+0x34a>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	89 2b       	or	r24, r25
    11da:	11 f4       	brne	.+4      	; 0x11e0 <play_game+0x352>
    11dc:	22 23       	and	r18, r18
    11de:	21 f0       	breq	.+8      	; 0x11e8 <play_game+0x35a>
					move_player_paddle(PLAYER_2, DOWN);
    11e0:	6f ef       	ldi	r22, 0xFF	; 255
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	0e 94 4d 04 	call	0x89a	; 0x89a <move_player_paddle>
				}
				if (serial_input == '1') {
    11e8:	bb 89       	ldd	r27, Y+19	; 0x13
    11ea:	b1 33       	cpi	r27, 0x31	; 49
    11ec:	01 f5       	brne	.+64     	; 0x122e <play_game+0x3a0>
					game_speed = 500;
					move_terminal_cursor(42,5);
    11ee:	65 e0       	ldi	r22, 0x05	; 5
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	8a e2       	ldi	r24, 0x2A	; 42
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
					printf_P(PSTR("%d"), game_speed);
    11fa:	1f 92       	push	r1
    11fc:	1f 92       	push	r1
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	8f 93       	push	r24
    1202:	84 ef       	ldi	r24, 0xF4	; 244
    1204:	8f 93       	push	r24
    1206:	8b ed       	ldi	r24, 0xDB	; 219
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9f 93       	push	r25
    120c:	8f 93       	push	r24
    120e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
				}
				if ((serial_input == 'k') | (serial_input == 'K') | (serial_input == 'l') | (serial_input == 'L')) {
					move_player_paddle(PLAYER_2, DOWN);
				}
				if (serial_input == '1') {
					game_speed = 500;
    121e:	24 ef       	ldi	r18, 0xF4	; 244
    1220:	31 e0       	ldi	r19, 0x01	; 1
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	2e 87       	std	Y+14, r18	; 0x0e
    1228:	3f 87       	std	Y+15, r19	; 0x0f
    122a:	48 8b       	std	Y+16, r20	; 0x10
    122c:	59 8b       	std	Y+17, r21	; 0x11
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '2') {
    122e:	3b 89       	ldd	r19, Y+19	; 0x13
    1230:	32 33       	cpi	r19, 0x32	; 50
    1232:	01 f5       	brne	.+64     	; 0x1274 <play_game+0x3e6>
					game_speed = 300;
					move_terminal_cursor(42,5);
    1234:	65 e0       	ldi	r22, 0x05	; 5
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	8a e2       	ldi	r24, 0x2A	; 42
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
					printf_P(PSTR("%d"), game_speed);
    1240:	1f 92       	push	r1
    1242:	1f 92       	push	r1
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	8f 93       	push	r24
    1248:	8c e2       	ldi	r24, 0x2C	; 44
    124a:	8f 93       	push	r24
    124c:	88 ed       	ldi	r24, 0xD8	; 216
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
					game_speed = 500;
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '2') {
					game_speed = 300;
    1264:	8c e2       	ldi	r24, 0x2C	; 44
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	8e 87       	std	Y+14, r24	; 0x0e
    126e:	9f 87       	std	Y+15, r25	; 0x0f
    1270:	a8 8b       	std	Y+16, r26	; 0x10
    1272:	b9 8b       	std	Y+17, r27	; 0x11
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '3') {
    1274:	9b 89       	ldd	r25, Y+19	; 0x13
    1276:	93 33       	cpi	r25, 0x33	; 51
    1278:	f9 f4       	brne	.+62     	; 0x12b8 <play_game+0x42a>
					game_speed = 200;
					move_terminal_cursor(42,5);
    127a:	65 e0       	ldi	r22, 0x05	; 5
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	8a e2       	ldi	r24, 0x2A	; 42
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
					printf_P(PSTR("%d"), game_speed);
    1286:	1f 92       	push	r1
    1288:	1f 92       	push	r1
    128a:	1f 92       	push	r1
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	8f 93       	push	r24
    1290:	85 ed       	ldi	r24, 0xD5	; 213
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9f 93       	push	r25
    1296:	8f 93       	push	r24
    1298:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
					game_speed = 300;
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '3') {
					game_speed = 200;
    12a8:	28 ec       	ldi	r18, 0xC8	; 200
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	2e 87       	std	Y+14, r18	; 0x0e
    12b2:	3f 87       	std	Y+15, r19	; 0x0f
    12b4:	48 8b       	std	Y+16, r20	; 0x10
    12b6:	59 8b       	std	Y+17, r21	; 0x11
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '4') {
    12b8:	3b 89       	ldd	r19, Y+19	; 0x13
    12ba:	34 33       	cpi	r19, 0x34	; 52
    12bc:	f9 f4       	brne	.+62     	; 0x12fc <play_game+0x46e>
					game_speed = 125;
					move_terminal_cursor(42,5);
    12be:	65 e0       	ldi	r22, 0x05	; 5
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	8a e2       	ldi	r24, 0x2A	; 42
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
					printf_P(PSTR("%d"), game_speed);
    12ca:	1f 92       	push	r1
    12cc:	1f 92       	push	r1
    12ce:	1f 92       	push	r1
    12d0:	8d e7       	ldi	r24, 0x7D	; 125
    12d2:	8f 93       	push	r24
    12d4:	82 ed       	ldi	r24, 0xD2	; 210
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9f 93       	push	r25
    12da:	8f 93       	push	r24
    12dc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
					game_speed = 200;
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if (serial_input == '4') {
					game_speed = 125;
    12ec:	8d e7       	ldi	r24, 0x7D	; 125
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	8e 87       	std	Y+14, r24	; 0x0e
    12f6:	9f 87       	std	Y+15, r25	; 0x0f
    12f8:	a8 8b       	std	Y+16, r26	; 0x10
    12fa:	b9 8b       	std	Y+17, r27	; 0x11
					move_terminal_cursor(42,5);
					printf_P(PSTR("%d"), game_speed);
				}
				if ((serial_input == 'p') | (serial_input == 'P')) {
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	ab 89       	ldd	r26, Y+19	; 0x13
    1300:	a0 37       	cpi	r26, 0x70	; 112
    1302:	09 f0       	breq	.+2      	; 0x1306 <play_game+0x478>
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	bb 89       	ldd	r27, Y+19	; 0x13
    130a:	b0 35       	cpi	r27, 0x50	; 80
    130c:	09 f0       	breq	.+2      	; 0x1310 <play_game+0x482>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	89 2b       	or	r24, r25
    1312:	81 f1       	breq	.+96     	; 0x1374 <play_game+0x4e6>
					saved_time = current_time;
					move_terminal_cursor(32,50);
    1314:	62 e3       	ldi	r22, 0x32	; 50
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <move_terminal_cursor>
					printf_P(PSTR("Game Paused"));
    1320:	86 ec       	ldi	r24, 0xC6	; 198
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9f 93       	push	r25
    1326:	8f 93       	push	r24
    1328:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
					PORTD ^= (1<<3);
    132c:	8b b1       	in	r24, 0x0b	; 11
    132e:	28 e0       	ldi	r18, 0x08	; 8
    1330:	82 27       	eor	r24, r18
    1332:	8b b9       	out	0x0b, r24	; 11
					pause_game();
    1334:	0e 94 24 07 	call	0xe48	; 0xe48 <pause_game>
					PORTD ^= (1<<3);
    1338:	8b b1       	in	r24, 0x0b	; 11
    133a:	38 e0       	ldi	r19, 0x08	; 8
    133c:	38 27       	eor	r19, r24
    133e:	3b b9       	out	0x0b, r19	; 11
					last_ball_move_time += (get_current_time() - saved_time);
    1340:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_current_time>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	2a 81       	ldd	r18, Y+2	; 0x02
    134a:	3b 81       	ldd	r19, Y+3	; 0x03
    134c:	4c 81       	ldd	r20, Y+4	; 0x04
    134e:	5d 81       	ldd	r21, Y+5	; 0x05
    1350:	82 1b       	sub	r24, r18
    1352:	93 0b       	sbc	r25, r19
    1354:	a4 0b       	sbc	r26, r20
    1356:	b5 0b       	sbc	r27, r21
    1358:	2f 81       	ldd	r18, Y+7	; 0x07
    135a:	38 85       	ldd	r19, Y+8	; 0x08
    135c:	49 85       	ldd	r20, Y+9	; 0x09
    135e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1360:	28 0f       	add	r18, r24
    1362:	39 1f       	adc	r19, r25
    1364:	4a 1f       	adc	r20, r26
    1366:	5b 1f       	adc	r21, r27
    1368:	2f 83       	std	Y+7, r18	; 0x07
    136a:	38 87       	std	Y+8, r19	; 0x08
    136c:	49 87       	std	Y+9, r20	; 0x09
    136e:	5a 87       	std	Y+10, r21	; 0x0a
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
				}
			
			} // if - serial input
		} //if led_flag == 0
		is_game_over();
    1374:	0e 94 00 06 	call	0xc00	; 0xc00 <is_game_over>
	printf_P(PSTR("get_current_time"));
	move_terminal_cursor(0,19);
	printf_P(PSTR("led_matrix_score_duration"));*/

	// We play the game until it's over
	while (!is_game_over()) {
    1378:	0e 94 00 06 	call	0xc00	; 0xc00 <is_game_over>
    137c:	88 23       	and	r24, r24
    137e:	09 f4       	brne	.+2      	; 0x1382 <play_game+0x4f4>
    1380:	ef cd       	rjmp	.-1058   	; 0xf60 <play_game+0xd2>
			} // if - serial input
		} //if led_flag == 0
		is_game_over();
	}// main while loop
	// We get here if the game is over.
}
    1382:	63 96       	adiw	r28, 0x13	; 19
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	bf 90       	pop	r11
    13a0:	af 90       	pop	r10
    13a2:	9f 90       	pop	r9
    13a4:	8f 90       	pop	r8
    13a6:	7f 90       	pop	r7
    13a8:	6f 90       	pop	r6
    13aa:	5f 90       	pop	r5
    13ac:	4f 90       	pop	r4
    13ae:	3f 90       	pop	r3
    13b0:	2f 90       	pop	r2
    13b2:	08 95       	ret

000013b4 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    13b4:	0e 94 56 06 	call	0xcac	; 0xcac <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    13b8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
    13bc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <new_game>
		play_game();
    13c0:	0e 94 47 07 	call	0xe8e	; 0xe8e <play_game>
		handle_game_over();
    13c4:	0e 94 de 06 	call	0xdbc	; 0xdbc <handle_game_over>
    13c8:	f9 cf       	rjmp	.-14     	; 0x13bc <main+0x8>

000013ca <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    13ca:	cf 93       	push	r28
    13cc:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if (c == '\n') {
    13ce:	8a 30       	cpi	r24, 0x0A	; 10
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    13d2:	8d e0       	ldi	r24, 0x0D	; 13
    13d4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    13d8:	9f b7       	in	r25, 0x3f	; 63
    13da:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <uart_put_char+0x18>
		if (!interrupts_enabled) {
    13de:	99 23       	and	r25, r25
    13e0:	29 f1       	breq	.+74     	; 0x142c <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    13e2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    13e6:	8f 3f       	cpi	r24, 0xFF	; 255
    13e8:	d1 f3       	breq	.-12     	; 0x13de <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    13ea:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    13ec:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <out_insert_pos>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	8e 0f       	add	r24, r30
    13f4:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <out_insert_pos>
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	e1 5a       	subi	r30, 0xA1	; 161
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1400:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE) {
    140a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <out_insert_pos>
    140e:	8f 3f       	cpi	r24, 0xFF	; 255
    1410:	11 f4       	brne	.+4      	; 0x1416 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1412:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1416:	e1 ec       	ldi	r30, 0xC1	; 193
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 62       	ori	r24, 0x20	; 32
    141e:	80 83       	st	Z, r24
	if (interrupts_enabled) {
    1420:	99 23       	and	r25, r25
    1422:	39 f0       	breq	.+14     	; 0x1432 <uart_put_char+0x68>
		sei();
    1424:	78 94       	sei
	}
	return 0;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if (!interrupts_enabled) {
			return 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled) {
		sei();
	}
	return 0;
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
}
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while (bytes_in_input_buffer == 0) {
    143a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <bytes_in_input_buffer>
    143e:	88 23       	and	r24, r24
    1440:	e1 f3       	breq	.-8      	; 0x143a <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1442:	2f b7       	in	r18, 0x3f	; 63
    1444:	20 78       	andi	r18, 0x80	; 128
	cli();
    1446:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0) {
    1448:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <input_insert_pos>
    144c:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	83 1b       	sub	r24, r19
    1454:	91 09       	sbc	r25, r1
    1456:	5a f4       	brpl	.+22     	; 0x146e <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1458:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <input_insert_pos>
    145c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e8 1b       	sub	r30, r24
    1464:	f1 09       	sbc	r31, r1
    1466:	e1 59       	subi	r30, 0x91	; 145
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	80 81       	ld	r24, Z
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    146e:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <input_insert_pos>
    1472:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	e8 1b       	sub	r30, r24
    147a:	f1 09       	sbc	r31, r1
    147c:	e1 5a       	subi	r30, 0xA1	; 161
    147e:	fd 4f       	sbci	r31, 0xFD	; 253
    1480:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1482:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <bytes_in_input_buffer>
	if (interrupts_enabled) {
    148c:	22 23       	and	r18, r18
    148e:	09 f0       	breq	.+2      	; 0x1492 <uart_get_char+0x58>
		sei();
    1490:	78 94       	sei
	}	
	return c;
}
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	08 95       	ret

00001496 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1496:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <out_insert_pos>
	bytes_in_out_buffer = 0;
    149a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <bytes_in_out_buffer>
	input_insert_pos = 0;
    149e:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <input_insert_pos>
	bytes_in_input_buffer = 0;
    14a2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <bytes_in_input_buffer>
	input_overrun = 0;
    14a6:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    14aa:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = (((SYSCLK / (8 * baudrate)) + 1) / 2) - 1;
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	aa 1f       	adc	r26, r26
    14b8:	bb 1f       	adc	r27, r27
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	aa 1f       	adc	r26, r26
    14c0:	bb 1f       	adc	r27, r27
    14c2:	9c 01       	movw	r18, r24
    14c4:	ad 01       	movw	r20, r26
    14c6:	22 0f       	add	r18, r18
    14c8:	33 1f       	adc	r19, r19
    14ca:	44 1f       	adc	r20, r20
    14cc:	55 1f       	adc	r21, r21
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	72 e1       	ldi	r23, 0x12	; 18
    14d2:	8a e7       	ldi	r24, 0x7A	; 122
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__divmodsi4>
    14da:	ba 01       	movw	r22, r20
    14dc:	a9 01       	movw	r20, r18
    14de:	4f 5f       	subi	r20, 0xFF	; 255
    14e0:	5f 4f       	sbci	r21, 0xFF	; 255
    14e2:	6f 4f       	sbci	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	db 01       	movw	r26, r22
    14e8:	ca 01       	movw	r24, r20
    14ea:	1a f4       	brpl	.+6      	; 0x14f2 <init_serial_stdio+0x5c>
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	b1 1d       	adc	r27, r1
    14f2:	b5 95       	asr	r27
    14f4:	a7 95       	ror	r26
    14f6:	97 95       	ror	r25
    14f8:	87 95       	ror	r24
    14fa:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    14fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1500:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1504:	e1 ec       	ldi	r30, 0xC1	; 193
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	88 e1       	ldi	r24, 0x18	; 24
    150a:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 << RXCIE0);
    150c:	80 81       	ld	r24, Z
    150e:	80 68       	ori	r24, 0x80	; 128
    1510:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1512:	e1 e7       	ldi	r30, 0x71	; 113
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	8e e0       	ldi	r24, 0x0E	; 14
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	93 83       	std	Z+3, r25	; 0x03
    151c:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	08 95       	ret

00001524 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return bytes_in_input_buffer != 0;
    1524:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	91 11       	cpse	r25, r1
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <serial_input_available+0xc>
    152e:	80 e0       	ldi	r24, 0x00	; 0
}
    1530:	08 95       	ret

00001532 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1532:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <input_insert_pos>
	bytes_in_input_buffer = 0;
    1536:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <bytes_in_input_buffer>
    153a:	08 95       	ret

0000153c <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	ef 93       	push	r30
    154e:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if (bytes_in_out_buffer > 0) {
    1550:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1554:	88 23       	and	r24, r24
    1556:	29 f1       	breq	.+74     	; 0x15a2 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0) {
    1558:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <out_insert_pos>
    155c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	82 1b       	sub	r24, r18
    1564:	91 09       	sbc	r25, r1
    1566:	5a f4       	brpl	.+22     	; 0x157e <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1568:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <out_insert_pos>
    156c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	e8 1b       	sub	r30, r24
    1574:	f1 09       	sbc	r31, r1
    1576:	e2 5a       	subi	r30, 0xA2	; 162
    1578:	fd 4f       	sbci	r31, 0xFD	; 253
    157a:	90 81       	ld	r25, Z
    157c:	0a c0       	rjmp	.+20     	; 0x1592 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    157e:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <out_insert_pos>
    1582:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	e8 1b       	sub	r30, r24
    158a:	f1 09       	sbc	r31, r1
    158c:	e1 5a       	subi	r30, 0xA1	; 161
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1592:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    159c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    15a0:	05 c0       	rjmp	.+10     	; 0x15ac <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1 << UDRIE0);
    15a2:	e1 ec       	ldi	r30, 0xC1	; 193
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 7d       	andi	r24, 0xDF	; 223
    15aa:	80 83       	st	Z, r24
	}
}
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	9f 91       	pop	r25
    15b2:	8f 91       	pop	r24
    15b4:	2f 91       	pop	r18
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	cf 93       	push	r28
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    15e4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    15e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <do_echo>
    15ec:	88 23       	and	r24, r24
    15ee:	49 f0       	breq	.+18     	; 0x1602 <__vector_20+0x42>
    15f0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <bytes_in_out_buffer>
    15f4:	8f 3f       	cpi	r24, 0xFF	; 255
    15f6:	29 f0       	breq	.+10     	; 0x1602 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	8c 2f       	mov	r24, r28
    15fe:	0e 94 e5 09 	call	0x13ca	; 0x13ca <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1602:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1606:	80 31       	cpi	r24, 0x10	; 16
    1608:	20 f0       	brcs	.+8      	; 0x1612 <__vector_20+0x52>
		input_overrun = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <input_overrun>
    1610:	18 c0       	rjmp	.+48     	; 0x1642 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1612:	cd 30       	cpi	r28, 0x0D	; 13
    1614:	09 f4       	brne	.+2      	; 0x1618 <__vector_20+0x58>
			c = '\n';
    1616:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1618:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <input_insert_pos>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	8e 0f       	add	r24, r30
    1620:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <input_insert_pos>
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	e1 5a       	subi	r30, 0xA1	; 161
    1628:	fd 4f       	sbci	r31, 0xFD	; 253
    162a:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    162c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <bytes_in_input_buffer>
    1630:	8f 5f       	subi	r24, 0xFF	; 255
    1632:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE) {
    1636:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <input_insert_pos>
    163a:	80 31       	cpi	r24, 0x10	; 16
    163c:	11 f4       	brne	.+4      	; 0x1642 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    163e:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <input_insert_pos>
		}
	}
}
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	cf 91       	pop	r28
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    1666:	94 b1       	in	r25, 0x04	; 4
    1668:	90 6b       	ori	r25, 0xB0	; 176
    166a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    166c:	95 b1       	in	r25, 0x05	; 5
    166e:	90 61       	ori	r25, 0x10	; 16
    1670:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    1672:	90 e5       	ldi	r25, 0x50	; 80
    1674:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch (clockdivider) {
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	21 f0       	breq	.+8      	; 0x1682 <spi_setup_master+0x1c>
    167a:	80 32       	cpi	r24, 0x20	; 32
    167c:	11 f0       	breq	.+4      	; 0x1682 <spi_setup_master+0x1c>
    167e:	82 30       	cpi	r24, 0x02	; 2
    1680:	19 f4       	brne	.+6      	; 0x1688 <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	9d bd       	out	0x2d, r25	; 45
			break;
    1686:	01 c0       	rjmp	.+2      	; 0x168a <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1688:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider) {
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	69 f0       	breq	.+26     	; 0x16a8 <spi_setup_master+0x42>
    168e:	28 f4       	brcc	.+10     	; 0x169a <spi_setup_master+0x34>
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	71 f0       	breq	.+28     	; 0x16b0 <spi_setup_master+0x4a>
    1694:	80 31       	cpi	r24, 0x10	; 16
    1696:	61 f0       	breq	.+24     	; 0x16b0 <spi_setup_master+0x4a>
    1698:	0e c0       	rjmp	.+28     	; 0x16b6 <spi_setup_master+0x50>
    169a:	80 34       	cpi	r24, 0x40	; 64
    169c:	29 f0       	breq	.+10     	; 0x16a8 <spi_setup_master+0x42>
    169e:	80 38       	cpi	r24, 0x80	; 128
    16a0:	51 f4       	brne	.+20     	; 0x16b6 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
    16a2:	8c b5       	in	r24, 0x2c	; 44
    16a4:	81 60       	ori	r24, 0x01	; 1
    16a6:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1 << SPR10);
    16a8:	8c b5       	in	r24, 0x2c	; 44
    16aa:	82 60       	ori	r24, 0x02	; 2
    16ac:	8c bd       	out	0x2c, r24	; 44
			break;
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1 << SPR00);
    16b0:	8c b5       	in	r24, 0x2c	; 44
    16b2:	81 60       	ori	r24, 0x01	; 1
    16b4:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    16b6:	85 b1       	in	r24, 0x05	; 5
    16b8:	8f 7e       	andi	r24, 0xEF	; 239
    16ba:	85 b9       	out	0x05, r24	; 5
    16bc:	08 95       	ret

000016be <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    16be:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0) {
    16c0:	0d b4       	in	r0, 0x2d	; 45
    16c2:	07 fe       	sbrs	r0, 7
    16c4:	fd cf       	rjmp	.-6      	; 0x16c0 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    16c6:	8e b5       	in	r24, 0x2e	; 46
}
    16c8:	08 95       	ret

000016ca <move_terminal_cursor>:
	printf_P(PSTR("\x1b[%dm"), parameter);
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
}
    16ca:	9f 93       	push	r25
    16cc:	8f 93       	push	r24
    16ce:	7f 93       	push	r23
    16d0:	6f 93       	push	r22
    16d2:	80 e5       	ldi	r24, 0x50	; 80
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	9f 93       	push	r25
    16d8:	8f 93       	push	r24
    16da:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	08 95       	ret

000016ec <clear_terminal>:
    16ec:	8b e4       	ldi	r24, 0x4B	; 75
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	08 95       	ret

000016fe <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
    16fe:	84 e4       	ldi	r24, 0x44	; 68
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	9f 93       	push	r25
    1704:	8f 93       	push	r24
    1706:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf_P>
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	08 95       	ret

00001710 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks_ms = 0L;
    1710:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <clock_ticks_ms>
    1714:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <clock_ticks_ms+0x1>
    1718:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <clock_ticks_ms+0x2>
    171c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <clock_ticks_ms+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1720:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1722:	8c e7       	ldi	r24, 0x7C	; 124
    1724:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1 << WGM01);
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1 << OCIE0A);
    172e:	ee e6       	ldi	r30, 0x6E	; 110
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	82 60       	ori	r24, 0x02	; 2
    1736:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 = (1 << OCF0A);
    1738:	95 bb       	out	0x15, r25	; 21
    173a:	08 95       	ret

0000173c <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
    173c:	8f b7       	in	r24, 0x3f	; 63
    173e:	28 2f       	mov	r18, r24
    1740:	20 78       	andi	r18, 0x80	; 128
	cli();
    1742:	f8 94       	cli
	return_value = clock_ticks_ms;
    1744:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <clock_ticks_ms>
    1748:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <clock_ticks_ms+0x1>
    174c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <clock_ticks_ms+0x2>
    1750:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled) {
    1754:	22 23       	and	r18, r18
    1756:	09 f0       	breq	.+2      	; 0x175a <get_current_time+0x1e>
		sei();
    1758:	78 94       	sei
	}
	return return_value;
}
    175a:	08 95       	ret

0000175c <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	2f 93       	push	r18
    1768:	3f 93       	push	r19
    176a:	4f 93       	push	r20
    176c:	5f 93       	push	r21
    176e:	6f 93       	push	r22
    1770:	7f 93       	push	r23
    1772:	8f 93       	push	r24
    1774:	9f 93       	push	r25
    1776:	af 93       	push	r26
    1778:	bf 93       	push	r27
    177a:	ef 93       	push	r30
    177c:	ff 93       	push	r31
	/* Increment our clock tick count */
	clock_ticks_ms++;
    177e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <clock_ticks_ms>
    1782:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <clock_ticks_ms+0x1>
    1786:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <clock_ticks_ms+0x2>
    178a:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <clock_ticks_ms+0x3>
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	a1 1d       	adc	r26, r1
    1792:	b1 1d       	adc	r27, r1
    1794:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <clock_ticks_ms>
    1798:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <clock_ticks_ms+0x1>
    179c:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <clock_ticks_ms+0x2>
    17a0:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <clock_ticks_ms+0x3>
	
	// ssd
	seven_seg_dis();
    17a4:	0e 94 de 05 	call	0xbbc	; 0xbbc <seven_seg_dis>
}
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	bf 91       	pop	r27
    17ae:	af 91       	pop	r26
    17b0:	9f 91       	pop	r25
    17b2:	8f 91       	pop	r24
    17b4:	7f 91       	pop	r23
    17b6:	6f 91       	pop	r22
    17b8:	5f 91       	pop	r21
    17ba:	4f 91       	pop	r20
    17bc:	3f 91       	pop	r19
    17be:	2f 91       	pop	r18
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <__divmodhi4>:
    17ca:	97 fb       	bst	r25, 7
    17cc:	07 2e       	mov	r0, r23
    17ce:	16 f4       	brtc	.+4      	; 0x17d4 <__divmodhi4+0xa>
    17d0:	00 94       	com	r0
    17d2:	07 d0       	rcall	.+14     	; 0x17e2 <__divmodhi4_neg1>
    17d4:	77 fd       	sbrc	r23, 7
    17d6:	09 d0       	rcall	.+18     	; 0x17ea <__divmodhi4_neg2>
    17d8:	0e 94 18 0c 	call	0x1830	; 0x1830 <__udivmodhi4>
    17dc:	07 fc       	sbrc	r0, 7
    17de:	05 d0       	rcall	.+10     	; 0x17ea <__divmodhi4_neg2>
    17e0:	3e f4       	brtc	.+14     	; 0x17f0 <__divmodhi4_exit>

000017e2 <__divmodhi4_neg1>:
    17e2:	90 95       	com	r25
    17e4:	81 95       	neg	r24
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	08 95       	ret

000017ea <__divmodhi4_neg2>:
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255

000017f0 <__divmodhi4_exit>:
    17f0:	08 95       	ret

000017f2 <__divmodsi4>:
    17f2:	05 2e       	mov	r0, r21
    17f4:	97 fb       	bst	r25, 7
    17f6:	1e f4       	brtc	.+6      	; 0x17fe <__divmodsi4+0xc>
    17f8:	00 94       	com	r0
    17fa:	0e 94 10 0c 	call	0x1820	; 0x1820 <__negsi2>
    17fe:	57 fd       	sbrc	r21, 7
    1800:	07 d0       	rcall	.+14     	; 0x1810 <__divmodsi4_neg2>
    1802:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__udivmodsi4>
    1806:	07 fc       	sbrc	r0, 7
    1808:	03 d0       	rcall	.+6      	; 0x1810 <__divmodsi4_neg2>
    180a:	4e f4       	brtc	.+18     	; 0x181e <__divmodsi4_exit>
    180c:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__negsi2>

00001810 <__divmodsi4_neg2>:
    1810:	50 95       	com	r21
    1812:	40 95       	com	r20
    1814:	30 95       	com	r19
    1816:	21 95       	neg	r18
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	4f 4f       	sbci	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255

0000181e <__divmodsi4_exit>:
    181e:	08 95       	ret

00001820 <__negsi2>:
    1820:	90 95       	com	r25
    1822:	80 95       	com	r24
    1824:	70 95       	com	r23
    1826:	61 95       	neg	r22
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	8f 4f       	sbci	r24, 0xFF	; 255
    182c:	9f 4f       	sbci	r25, 0xFF	; 255
    182e:	08 95       	ret

00001830 <__udivmodhi4>:
    1830:	aa 1b       	sub	r26, r26
    1832:	bb 1b       	sub	r27, r27
    1834:	51 e1       	ldi	r21, 0x11	; 17
    1836:	07 c0       	rjmp	.+14     	; 0x1846 <__udivmodhi4_ep>

00001838 <__udivmodhi4_loop>:
    1838:	aa 1f       	adc	r26, r26
    183a:	bb 1f       	adc	r27, r27
    183c:	a6 17       	cp	r26, r22
    183e:	b7 07       	cpc	r27, r23
    1840:	10 f0       	brcs	.+4      	; 0x1846 <__udivmodhi4_ep>
    1842:	a6 1b       	sub	r26, r22
    1844:	b7 0b       	sbc	r27, r23

00001846 <__udivmodhi4_ep>:
    1846:	88 1f       	adc	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	5a 95       	dec	r21
    184c:	a9 f7       	brne	.-22     	; 0x1838 <__udivmodhi4_loop>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	08 95       	ret

00001858 <__udivmodsi4>:
    1858:	a1 e2       	ldi	r26, 0x21	; 33
    185a:	1a 2e       	mov	r1, r26
    185c:	aa 1b       	sub	r26, r26
    185e:	bb 1b       	sub	r27, r27
    1860:	fd 01       	movw	r30, r26
    1862:	0d c0       	rjmp	.+26     	; 0x187e <__udivmodsi4_ep>

00001864 <__udivmodsi4_loop>:
    1864:	aa 1f       	adc	r26, r26
    1866:	bb 1f       	adc	r27, r27
    1868:	ee 1f       	adc	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	a2 17       	cp	r26, r18
    186e:	b3 07       	cpc	r27, r19
    1870:	e4 07       	cpc	r30, r20
    1872:	f5 07       	cpc	r31, r21
    1874:	20 f0       	brcs	.+8      	; 0x187e <__udivmodsi4_ep>
    1876:	a2 1b       	sub	r26, r18
    1878:	b3 0b       	sbc	r27, r19
    187a:	e4 0b       	sbc	r30, r20
    187c:	f5 0b       	sbc	r31, r21

0000187e <__udivmodsi4_ep>:
    187e:	66 1f       	adc	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	1a 94       	dec	r1
    1888:	69 f7       	brne	.-38     	; 0x1864 <__udivmodsi4_loop>
    188a:	60 95       	com	r22
    188c:	70 95       	com	r23
    188e:	80 95       	com	r24
    1890:	90 95       	com	r25
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	bd 01       	movw	r22, r26
    1898:	cf 01       	movw	r24, r30
    189a:	08 95       	ret

0000189c <do_rand>:
    189c:	8f 92       	push	r8
    189e:	9f 92       	push	r9
    18a0:	af 92       	push	r10
    18a2:	bf 92       	push	r11
    18a4:	cf 92       	push	r12
    18a6:	df 92       	push	r13
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	68 81       	ld	r22, Y
    18b4:	79 81       	ldd	r23, Y+1	; 0x01
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	61 15       	cp	r22, r1
    18bc:	71 05       	cpc	r23, r1
    18be:	81 05       	cpc	r24, r1
    18c0:	91 05       	cpc	r25, r1
    18c2:	21 f4       	brne	.+8      	; 0x18cc <do_rand+0x30>
    18c4:	64 e2       	ldi	r22, 0x24	; 36
    18c6:	79 ed       	ldi	r23, 0xD9	; 217
    18c8:	8b e5       	ldi	r24, 0x5B	; 91
    18ca:	97 e0       	ldi	r25, 0x07	; 7
    18cc:	2d e1       	ldi	r18, 0x1D	; 29
    18ce:	33 ef       	ldi	r19, 0xF3	; 243
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__divmodsi4>
    18d8:	49 01       	movw	r8, r18
    18da:	5a 01       	movw	r10, r20
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	a7 ea       	ldi	r26, 0xA7	; 167
    18e2:	b1 e4       	ldi	r27, 0x41	; 65
    18e4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__muluhisi3>
    18e8:	6b 01       	movw	r12, r22
    18ea:	7c 01       	movw	r14, r24
    18ec:	ac ee       	ldi	r26, 0xEC	; 236
    18ee:	b4 ef       	ldi	r27, 0xF4	; 244
    18f0:	a5 01       	movw	r20, r10
    18f2:	94 01       	movw	r18, r8
    18f4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__mulohisi3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8c 0d       	add	r24, r12
    18fe:	9d 1d       	adc	r25, r13
    1900:	ae 1d       	adc	r26, r14
    1902:	bf 1d       	adc	r27, r15
    1904:	b7 ff       	sbrs	r27, 7
    1906:	03 c0       	rjmp	.+6      	; 0x190e <do_rand+0x72>
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	a1 09       	sbc	r26, r1
    190c:	b0 48       	sbci	r27, 0x80	; 128
    190e:	88 83       	st	Y, r24
    1910:	99 83       	std	Y+1, r25	; 0x01
    1912:	aa 83       	std	Y+2, r26	; 0x02
    1914:	bb 83       	std	Y+3, r27	; 0x03
    1916:	9f 77       	andi	r25, 0x7F	; 127
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	08 95       	ret

0000192e <rand_r>:
    192e:	0e 94 4e 0c 	call	0x189c	; 0x189c <do_rand>
    1932:	08 95       	ret

00001934 <rand>:
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	0e 94 4e 0c 	call	0x189c	; 0x189c <do_rand>
    193c:	08 95       	ret

0000193e <srand>:
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1946:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    194a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    194e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1952:	08 95       	ret

00001954 <fgetc>:
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	ec 01       	movw	r28, r24
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	20 ff       	sbrs	r18, 0
    195e:	33 c0       	rjmp	.+102    	; 0x19c6 <fgetc+0x72>
    1960:	26 ff       	sbrs	r18, 6
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <fgetc+0x24>
    1964:	2f 7b       	andi	r18, 0xBF	; 191
    1966:	2b 83       	std	Y+3, r18	; 0x03
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	9f 83       	std	Y+7, r25	; 0x07
    1970:	8e 83       	std	Y+6, r24	; 0x06
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	29 c0       	rjmp	.+82     	; 0x19ca <fgetc+0x76>
    1978:	22 ff       	sbrs	r18, 2
    197a:	0f c0       	rjmp	.+30     	; 0x199a <fgetc+0x46>
    197c:	e8 81       	ld	r30, Y
    197e:	f9 81       	ldd	r31, Y+1	; 0x01
    1980:	80 81       	ld	r24, Z
    1982:	08 2e       	mov	r0, r24
    1984:	00 0c       	add	r0, r0
    1986:	99 0b       	sbc	r25, r25
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	19 f4       	brne	.+6      	; 0x1992 <fgetc+0x3e>
    198c:	20 62       	ori	r18, 0x20	; 32
    198e:	2b 83       	std	Y+3, r18	; 0x03
    1990:	1a c0       	rjmp	.+52     	; 0x19c6 <fgetc+0x72>
    1992:	31 96       	adiw	r30, 0x01	; 1
    1994:	f9 83       	std	Y+1, r31	; 0x01
    1996:	e8 83       	st	Y, r30
    1998:	0e c0       	rjmp	.+28     	; 0x19b6 <fgetc+0x62>
    199a:	ea 85       	ldd	r30, Y+10	; 0x0a
    199c:	fb 85       	ldd	r31, Y+11	; 0x0b
    199e:	09 95       	icall
    19a0:	97 ff       	sbrs	r25, 7
    19a2:	09 c0       	rjmp	.+18     	; 0x19b6 <fgetc+0x62>
    19a4:	2b 81       	ldd	r18, Y+3	; 0x03
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	11 f0       	breq	.+4      	; 0x19ae <fgetc+0x5a>
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <fgetc+0x5c>
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	82 2b       	or	r24, r18
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <fgetc+0x72>
    19b6:	2e 81       	ldd	r18, Y+6	; 0x06
    19b8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	3f 83       	std	Y+7, r19	; 0x07
    19c0:	2e 83       	std	Y+6, r18	; 0x06
    19c2:	99 27       	eor	r25, r25
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <fgetc+0x76>
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	9f ef       	ldi	r25, 0xFF	; 255
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <printf_P>:
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ee ee       	ldi	r30, 0xEE	; 238
    19d6:	fc e0       	ldi	r31, 0x0C	; 12
    19d8:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__+0x1c>
    19dc:	ae 01       	movw	r20, r28
    19de:	49 5f       	subi	r20, 0xF9	; 249
    19e0:	5f 4f       	sbci	r21, 0xFF	; 255
    19e2:	da 01       	movw	r26, r20
    19e4:	6d 91       	ld	r22, X+
    19e6:	7d 91       	ld	r23, X+
    19e8:	ad 01       	movw	r20, r26
    19ea:	01 e7       	ldi	r16, 0x71	; 113
    19ec:	12 e0       	ldi	r17, 0x02	; 2
    19ee:	f8 01       	movw	r30, r16
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	dc 01       	movw	r26, r24
    19f6:	13 96       	adiw	r26, 0x03	; 3
    19f8:	2c 91       	ld	r18, X
    19fa:	13 97       	sbiw	r26, 0x03	; 3
    19fc:	28 60       	ori	r18, 0x08	; 8
    19fe:	13 96       	adiw	r26, 0x03	; 3
    1a00:	2c 93       	st	X, r18
    1a02:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vfprintf>
    1a06:	d8 01       	movw	r26, r16
    1a08:	12 96       	adiw	r26, 0x02	; 2
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	13 97       	sbiw	r26, 0x03	; 3
    1a10:	23 81       	ldd	r18, Z+3	; 0x03
    1a12:	27 7f       	andi	r18, 0xF7	; 247
    1a14:	23 83       	std	Z+3, r18	; 0x03
    1a16:	e4 e0       	ldi	r30, 0x04	; 4
    1a18:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__+0x1c>

00001a1c <vfprintf>:
    1a1c:	ab e0       	ldi	r26, 0x0B	; 11
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e4 e1       	ldi	r30, 0x14	; 20
    1a22:	fd e0       	ldi	r31, 0x0D	; 13
    1a24:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__prologue_saves__>
    1a28:	6c 01       	movw	r12, r24
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	8a 01       	movw	r16, r20
    1a2e:	fc 01       	movw	r30, r24
    1a30:	17 82       	std	Z+7, r1	; 0x07
    1a32:	16 82       	std	Z+6, r1	; 0x06
    1a34:	83 81       	ldd	r24, Z+3	; 0x03
    1a36:	81 ff       	sbrs	r24, 1
    1a38:	cc c1       	rjmp	.+920    	; 0x1dd2 <vfprintf+0x3b6>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	3c 01       	movw	r6, r24
    1a40:	f6 01       	movw	r30, r12
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	f7 01       	movw	r30, r14
    1a46:	93 fd       	sbrc	r25, 3
    1a48:	85 91       	lpm	r24, Z+
    1a4a:	93 ff       	sbrs	r25, 3
    1a4c:	81 91       	ld	r24, Z+
    1a4e:	7f 01       	movw	r14, r30
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <vfprintf+0x3a>
    1a54:	ba c1       	rjmp	.+884    	; 0x1dca <vfprintf+0x3ae>
    1a56:	85 32       	cpi	r24, 0x25	; 37
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <vfprintf+0x4c>
    1a5a:	93 fd       	sbrc	r25, 3
    1a5c:	85 91       	lpm	r24, Z+
    1a5e:	93 ff       	sbrs	r25, 3
    1a60:	81 91       	ld	r24, Z+
    1a62:	7f 01       	movw	r14, r30
    1a64:	85 32       	cpi	r24, 0x25	; 37
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <vfprintf+0x56>
    1a68:	b6 01       	movw	r22, r12
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1a70:	e7 cf       	rjmp	.-50     	; 0x1a40 <vfprintf+0x24>
    1a72:	91 2c       	mov	r9, r1
    1a74:	21 2c       	mov	r2, r1
    1a76:	31 2c       	mov	r3, r1
    1a78:	ff e1       	ldi	r31, 0x1F	; 31
    1a7a:	f3 15       	cp	r31, r3
    1a7c:	d8 f0       	brcs	.+54     	; 0x1ab4 <vfprintf+0x98>
    1a7e:	8b 32       	cpi	r24, 0x2B	; 43
    1a80:	79 f0       	breq	.+30     	; 0x1aa0 <vfprintf+0x84>
    1a82:	38 f4       	brcc	.+14     	; 0x1a92 <vfprintf+0x76>
    1a84:	80 32       	cpi	r24, 0x20	; 32
    1a86:	79 f0       	breq	.+30     	; 0x1aa6 <vfprintf+0x8a>
    1a88:	83 32       	cpi	r24, 0x23	; 35
    1a8a:	a1 f4       	brne	.+40     	; 0x1ab4 <vfprintf+0x98>
    1a8c:	23 2d       	mov	r18, r3
    1a8e:	20 61       	ori	r18, 0x10	; 16
    1a90:	1d c0       	rjmp	.+58     	; 0x1acc <vfprintf+0xb0>
    1a92:	8d 32       	cpi	r24, 0x2D	; 45
    1a94:	61 f0       	breq	.+24     	; 0x1aae <vfprintf+0x92>
    1a96:	80 33       	cpi	r24, 0x30	; 48
    1a98:	69 f4       	brne	.+26     	; 0x1ab4 <vfprintf+0x98>
    1a9a:	23 2d       	mov	r18, r3
    1a9c:	21 60       	ori	r18, 0x01	; 1
    1a9e:	16 c0       	rjmp	.+44     	; 0x1acc <vfprintf+0xb0>
    1aa0:	83 2d       	mov	r24, r3
    1aa2:	82 60       	ori	r24, 0x02	; 2
    1aa4:	38 2e       	mov	r3, r24
    1aa6:	e3 2d       	mov	r30, r3
    1aa8:	e4 60       	ori	r30, 0x04	; 4
    1aaa:	3e 2e       	mov	r3, r30
    1aac:	2a c0       	rjmp	.+84     	; 0x1b02 <vfprintf+0xe6>
    1aae:	f3 2d       	mov	r31, r3
    1ab0:	f8 60       	ori	r31, 0x08	; 8
    1ab2:	1d c0       	rjmp	.+58     	; 0x1aee <vfprintf+0xd2>
    1ab4:	37 fc       	sbrc	r3, 7
    1ab6:	2d c0       	rjmp	.+90     	; 0x1b12 <vfprintf+0xf6>
    1ab8:	20 ed       	ldi	r18, 0xD0	; 208
    1aba:	28 0f       	add	r18, r24
    1abc:	2a 30       	cpi	r18, 0x0A	; 10
    1abe:	40 f0       	brcs	.+16     	; 0x1ad0 <vfprintf+0xb4>
    1ac0:	8e 32       	cpi	r24, 0x2E	; 46
    1ac2:	b9 f4       	brne	.+46     	; 0x1af2 <vfprintf+0xd6>
    1ac4:	36 fc       	sbrc	r3, 6
    1ac6:	81 c1       	rjmp	.+770    	; 0x1dca <vfprintf+0x3ae>
    1ac8:	23 2d       	mov	r18, r3
    1aca:	20 64       	ori	r18, 0x40	; 64
    1acc:	32 2e       	mov	r3, r18
    1ace:	19 c0       	rjmp	.+50     	; 0x1b02 <vfprintf+0xe6>
    1ad0:	36 fe       	sbrs	r3, 6
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <vfprintf+0xc4>
    1ad4:	8a e0       	ldi	r24, 0x0A	; 10
    1ad6:	98 9e       	mul	r9, r24
    1ad8:	20 0d       	add	r18, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	92 2e       	mov	r9, r18
    1ade:	11 c0       	rjmp	.+34     	; 0x1b02 <vfprintf+0xe6>
    1ae0:	ea e0       	ldi	r30, 0x0A	; 10
    1ae2:	2e 9e       	mul	r2, r30
    1ae4:	20 0d       	add	r18, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	22 2e       	mov	r2, r18
    1aea:	f3 2d       	mov	r31, r3
    1aec:	f0 62       	ori	r31, 0x20	; 32
    1aee:	3f 2e       	mov	r3, r31
    1af0:	08 c0       	rjmp	.+16     	; 0x1b02 <vfprintf+0xe6>
    1af2:	8c 36       	cpi	r24, 0x6C	; 108
    1af4:	21 f4       	brne	.+8      	; 0x1afe <vfprintf+0xe2>
    1af6:	83 2d       	mov	r24, r3
    1af8:	80 68       	ori	r24, 0x80	; 128
    1afa:	38 2e       	mov	r3, r24
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <vfprintf+0xe6>
    1afe:	88 36       	cpi	r24, 0x68	; 104
    1b00:	41 f4       	brne	.+16     	; 0x1b12 <vfprintf+0xf6>
    1b02:	f7 01       	movw	r30, r14
    1b04:	93 fd       	sbrc	r25, 3
    1b06:	85 91       	lpm	r24, Z+
    1b08:	93 ff       	sbrs	r25, 3
    1b0a:	81 91       	ld	r24, Z+
    1b0c:	7f 01       	movw	r14, r30
    1b0e:	81 11       	cpse	r24, r1
    1b10:	b3 cf       	rjmp	.-154    	; 0x1a78 <vfprintf+0x5c>
    1b12:	98 2f       	mov	r25, r24
    1b14:	9f 7d       	andi	r25, 0xDF	; 223
    1b16:	95 54       	subi	r25, 0x45	; 69
    1b18:	93 30       	cpi	r25, 0x03	; 3
    1b1a:	28 f4       	brcc	.+10     	; 0x1b26 <vfprintf+0x10a>
    1b1c:	0c 5f       	subi	r16, 0xFC	; 252
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	9f e3       	ldi	r25, 0x3F	; 63
    1b22:	99 83       	std	Y+1, r25	; 0x01
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <vfprintf+0x124>
    1b26:	83 36       	cpi	r24, 0x63	; 99
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <vfprintf+0x11a>
    1b2a:	83 37       	cpi	r24, 0x73	; 115
    1b2c:	71 f0       	breq	.+28     	; 0x1b4a <vfprintf+0x12e>
    1b2e:	83 35       	cpi	r24, 0x53	; 83
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <vfprintf+0x118>
    1b32:	59 c0       	rjmp	.+178    	; 0x1be6 <vfprintf+0x1ca>
    1b34:	21 c0       	rjmp	.+66     	; 0x1b78 <vfprintf+0x15c>
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 81       	ld	r24, Z
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	0e 5f       	subi	r16, 0xFE	; 254
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	88 24       	eor	r8, r8
    1b42:	83 94       	inc	r8
    1b44:	91 2c       	mov	r9, r1
    1b46:	53 01       	movw	r10, r6
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <vfprintf+0x154>
    1b4a:	28 01       	movw	r4, r16
    1b4c:	f2 e0       	ldi	r31, 0x02	; 2
    1b4e:	4f 0e       	add	r4, r31
    1b50:	51 1c       	adc	r5, r1
    1b52:	f8 01       	movw	r30, r16
    1b54:	a0 80       	ld	r10, Z
    1b56:	b1 80       	ldd	r11, Z+1	; 0x01
    1b58:	36 fe       	sbrs	r3, 6
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <vfprintf+0x146>
    1b5c:	69 2d       	mov	r22, r9
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <vfprintf+0x14a>
    1b62:	6f ef       	ldi	r22, 0xFF	; 255
    1b64:	7f ef       	ldi	r23, 0xFF	; 255
    1b66:	c5 01       	movw	r24, r10
    1b68:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <strnlen>
    1b6c:	4c 01       	movw	r8, r24
    1b6e:	82 01       	movw	r16, r4
    1b70:	f3 2d       	mov	r31, r3
    1b72:	ff 77       	andi	r31, 0x7F	; 127
    1b74:	3f 2e       	mov	r3, r31
    1b76:	16 c0       	rjmp	.+44     	; 0x1ba4 <vfprintf+0x188>
    1b78:	28 01       	movw	r4, r16
    1b7a:	22 e0       	ldi	r18, 0x02	; 2
    1b7c:	42 0e       	add	r4, r18
    1b7e:	51 1c       	adc	r5, r1
    1b80:	f8 01       	movw	r30, r16
    1b82:	a0 80       	ld	r10, Z
    1b84:	b1 80       	ldd	r11, Z+1	; 0x01
    1b86:	36 fe       	sbrs	r3, 6
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <vfprintf+0x174>
    1b8a:	69 2d       	mov	r22, r9
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <vfprintf+0x178>
    1b90:	6f ef       	ldi	r22, 0xFF	; 255
    1b92:	7f ef       	ldi	r23, 0xFF	; 255
    1b94:	c5 01       	movw	r24, r10
    1b96:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <strnlen_P>
    1b9a:	4c 01       	movw	r8, r24
    1b9c:	f3 2d       	mov	r31, r3
    1b9e:	f0 68       	ori	r31, 0x80	; 128
    1ba0:	3f 2e       	mov	r3, r31
    1ba2:	82 01       	movw	r16, r4
    1ba4:	33 fc       	sbrc	r3, 3
    1ba6:	1b c0       	rjmp	.+54     	; 0x1bde <vfprintf+0x1c2>
    1ba8:	82 2d       	mov	r24, r2
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	88 16       	cp	r8, r24
    1bae:	99 06       	cpc	r9, r25
    1bb0:	b0 f4       	brcc	.+44     	; 0x1bde <vfprintf+0x1c2>
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1bbc:	2a 94       	dec	r2
    1bbe:	f4 cf       	rjmp	.-24     	; 0x1ba8 <vfprintf+0x18c>
    1bc0:	f5 01       	movw	r30, r10
    1bc2:	37 fc       	sbrc	r3, 7
    1bc4:	85 91       	lpm	r24, Z+
    1bc6:	37 fe       	sbrs	r3, 7
    1bc8:	81 91       	ld	r24, Z+
    1bca:	5f 01       	movw	r10, r30
    1bcc:	b6 01       	movw	r22, r12
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1bd4:	21 10       	cpse	r2, r1
    1bd6:	2a 94       	dec	r2
    1bd8:	21 e0       	ldi	r18, 0x01	; 1
    1bda:	82 1a       	sub	r8, r18
    1bdc:	91 08       	sbc	r9, r1
    1bde:	81 14       	cp	r8, r1
    1be0:	91 04       	cpc	r9, r1
    1be2:	71 f7       	brne	.-36     	; 0x1bc0 <vfprintf+0x1a4>
    1be4:	e8 c0       	rjmp	.+464    	; 0x1db6 <vfprintf+0x39a>
    1be6:	84 36       	cpi	r24, 0x64	; 100
    1be8:	11 f0       	breq	.+4      	; 0x1bee <vfprintf+0x1d2>
    1bea:	89 36       	cpi	r24, 0x69	; 105
    1bec:	41 f5       	brne	.+80     	; 0x1c3e <vfprintf+0x222>
    1bee:	f8 01       	movw	r30, r16
    1bf0:	37 fe       	sbrs	r3, 7
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <vfprintf+0x1e6>
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	0c 5f       	subi	r16, 0xFC	; 252
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <vfprintf+0x1f6>
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	07 2e       	mov	r0, r23
    1c08:	00 0c       	add	r0, r0
    1c0a:	88 0b       	sbc	r24, r24
    1c0c:	99 0b       	sbc	r25, r25
    1c0e:	0e 5f       	subi	r16, 0xFE	; 254
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	f3 2d       	mov	r31, r3
    1c14:	ff 76       	andi	r31, 0x6F	; 111
    1c16:	3f 2e       	mov	r3, r31
    1c18:	97 ff       	sbrs	r25, 7
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <vfprintf+0x212>
    1c1c:	90 95       	com	r25
    1c1e:	80 95       	com	r24
    1c20:	70 95       	com	r23
    1c22:	61 95       	neg	r22
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	8f 4f       	sbci	r24, 0xFF	; 255
    1c28:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2a:	f0 68       	ori	r31, 0x80	; 128
    1c2c:	3f 2e       	mov	r3, r31
    1c2e:	2a e0       	ldi	r18, 0x0A	; 10
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	a3 01       	movw	r20, r6
    1c34:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__ultoa_invert>
    1c38:	88 2e       	mov	r8, r24
    1c3a:	86 18       	sub	r8, r6
    1c3c:	45 c0       	rjmp	.+138    	; 0x1cc8 <vfprintf+0x2ac>
    1c3e:	85 37       	cpi	r24, 0x75	; 117
    1c40:	31 f4       	brne	.+12     	; 0x1c4e <vfprintf+0x232>
    1c42:	23 2d       	mov	r18, r3
    1c44:	2f 7e       	andi	r18, 0xEF	; 239
    1c46:	b2 2e       	mov	r11, r18
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	25 c0       	rjmp	.+74     	; 0x1c98 <vfprintf+0x27c>
    1c4e:	93 2d       	mov	r25, r3
    1c50:	99 7f       	andi	r25, 0xF9	; 249
    1c52:	b9 2e       	mov	r11, r25
    1c54:	8f 36       	cpi	r24, 0x6F	; 111
    1c56:	c1 f0       	breq	.+48     	; 0x1c88 <vfprintf+0x26c>
    1c58:	18 f4       	brcc	.+6      	; 0x1c60 <vfprintf+0x244>
    1c5a:	88 35       	cpi	r24, 0x58	; 88
    1c5c:	79 f0       	breq	.+30     	; 0x1c7c <vfprintf+0x260>
    1c5e:	b5 c0       	rjmp	.+362    	; 0x1dca <vfprintf+0x3ae>
    1c60:	80 37       	cpi	r24, 0x70	; 112
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <vfprintf+0x24e>
    1c64:	88 37       	cpi	r24, 0x78	; 120
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <vfprintf+0x254>
    1c68:	b0 c0       	rjmp	.+352    	; 0x1dca <vfprintf+0x3ae>
    1c6a:	e9 2f       	mov	r30, r25
    1c6c:	e0 61       	ori	r30, 0x10	; 16
    1c6e:	be 2e       	mov	r11, r30
    1c70:	b4 fe       	sbrs	r11, 4
    1c72:	0d c0       	rjmp	.+26     	; 0x1c8e <vfprintf+0x272>
    1c74:	fb 2d       	mov	r31, r11
    1c76:	f4 60       	ori	r31, 0x04	; 4
    1c78:	bf 2e       	mov	r11, r31
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <vfprintf+0x272>
    1c7c:	34 fe       	sbrs	r3, 4
    1c7e:	0a c0       	rjmp	.+20     	; 0x1c94 <vfprintf+0x278>
    1c80:	29 2f       	mov	r18, r25
    1c82:	26 60       	ori	r18, 0x06	; 6
    1c84:	b2 2e       	mov	r11, r18
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <vfprintf+0x278>
    1c88:	28 e0       	ldi	r18, 0x08	; 8
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <vfprintf+0x27c>
    1c8e:	20 e1       	ldi	r18, 0x10	; 16
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <vfprintf+0x27c>
    1c94:	20 e1       	ldi	r18, 0x10	; 16
    1c96:	32 e0       	ldi	r19, 0x02	; 2
    1c98:	f8 01       	movw	r30, r16
    1c9a:	b7 fe       	sbrs	r11, 7
    1c9c:	07 c0       	rjmp	.+14     	; 0x1cac <vfprintf+0x290>
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	0c 5f       	subi	r16, 0xFC	; 252
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <vfprintf+0x29c>
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 5f       	subi	r16, 0xFE	; 254
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	a3 01       	movw	r20, r6
    1cba:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__ultoa_invert>
    1cbe:	88 2e       	mov	r8, r24
    1cc0:	86 18       	sub	r8, r6
    1cc2:	fb 2d       	mov	r31, r11
    1cc4:	ff 77       	andi	r31, 0x7F	; 127
    1cc6:	3f 2e       	mov	r3, r31
    1cc8:	36 fe       	sbrs	r3, 6
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <vfprintf+0x2ca>
    1ccc:	23 2d       	mov	r18, r3
    1cce:	2e 7f       	andi	r18, 0xFE	; 254
    1cd0:	a2 2e       	mov	r10, r18
    1cd2:	89 14       	cp	r8, r9
    1cd4:	58 f4       	brcc	.+22     	; 0x1cec <vfprintf+0x2d0>
    1cd6:	34 fe       	sbrs	r3, 4
    1cd8:	0b c0       	rjmp	.+22     	; 0x1cf0 <vfprintf+0x2d4>
    1cda:	32 fc       	sbrc	r3, 2
    1cdc:	09 c0       	rjmp	.+18     	; 0x1cf0 <vfprintf+0x2d4>
    1cde:	83 2d       	mov	r24, r3
    1ce0:	8e 7e       	andi	r24, 0xEE	; 238
    1ce2:	a8 2e       	mov	r10, r24
    1ce4:	05 c0       	rjmp	.+10     	; 0x1cf0 <vfprintf+0x2d4>
    1ce6:	b8 2c       	mov	r11, r8
    1ce8:	a3 2c       	mov	r10, r3
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <vfprintf+0x2d6>
    1cec:	b8 2c       	mov	r11, r8
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <vfprintf+0x2d6>
    1cf0:	b9 2c       	mov	r11, r9
    1cf2:	a4 fe       	sbrs	r10, 4
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <vfprintf+0x2f8>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e8 0d       	add	r30, r8
    1cfa:	f1 1d       	adc	r31, r1
    1cfc:	80 81       	ld	r24, Z
    1cfe:	80 33       	cpi	r24, 0x30	; 48
    1d00:	21 f4       	brne	.+8      	; 0x1d0a <vfprintf+0x2ee>
    1d02:	9a 2d       	mov	r25, r10
    1d04:	99 7e       	andi	r25, 0xE9	; 233
    1d06:	a9 2e       	mov	r10, r25
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <vfprintf+0x300>
    1d0a:	a2 fe       	sbrs	r10, 2
    1d0c:	06 c0       	rjmp	.+12     	; 0x1d1a <vfprintf+0x2fe>
    1d0e:	b3 94       	inc	r11
    1d10:	b3 94       	inc	r11
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <vfprintf+0x300>
    1d14:	8a 2d       	mov	r24, r10
    1d16:	86 78       	andi	r24, 0x86	; 134
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <vfprintf+0x300>
    1d1a:	b3 94       	inc	r11
    1d1c:	a3 fc       	sbrc	r10, 3
    1d1e:	11 c0       	rjmp	.+34     	; 0x1d42 <vfprintf+0x326>
    1d20:	a0 fe       	sbrs	r10, 0
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <vfprintf+0x314>
    1d24:	b2 14       	cp	r11, r2
    1d26:	88 f4       	brcc	.+34     	; 0x1d4a <vfprintf+0x32e>
    1d28:	28 0c       	add	r2, r8
    1d2a:	92 2c       	mov	r9, r2
    1d2c:	9b 18       	sub	r9, r11
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <vfprintf+0x330>
    1d30:	b2 14       	cp	r11, r2
    1d32:	60 f4       	brcc	.+24     	; 0x1d4c <vfprintf+0x330>
    1d34:	b6 01       	movw	r22, r12
    1d36:	80 e2       	ldi	r24, 0x20	; 32
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1d3e:	b3 94       	inc	r11
    1d40:	f7 cf       	rjmp	.-18     	; 0x1d30 <vfprintf+0x314>
    1d42:	b2 14       	cp	r11, r2
    1d44:	18 f4       	brcc	.+6      	; 0x1d4c <vfprintf+0x330>
    1d46:	2b 18       	sub	r2, r11
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <vfprintf+0x332>
    1d4a:	98 2c       	mov	r9, r8
    1d4c:	21 2c       	mov	r2, r1
    1d4e:	a4 fe       	sbrs	r10, 4
    1d50:	10 c0       	rjmp	.+32     	; 0x1d72 <vfprintf+0x356>
    1d52:	b6 01       	movw	r22, r12
    1d54:	80 e3       	ldi	r24, 0x30	; 48
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1d5c:	a2 fe       	sbrs	r10, 2
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <vfprintf+0x372>
    1d60:	a1 fc       	sbrc	r10, 1
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <vfprintf+0x34e>
    1d64:	88 e7       	ldi	r24, 0x78	; 120
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x352>
    1d6a:	88 e5       	ldi	r24, 0x58	; 88
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	b6 01       	movw	r22, r12
    1d70:	0c c0       	rjmp	.+24     	; 0x1d8a <vfprintf+0x36e>
    1d72:	8a 2d       	mov	r24, r10
    1d74:	86 78       	andi	r24, 0x86	; 134
    1d76:	59 f0       	breq	.+22     	; 0x1d8e <vfprintf+0x372>
    1d78:	a1 fe       	sbrs	r10, 1
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vfprintf+0x364>
    1d7c:	8b e2       	ldi	r24, 0x2B	; 43
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <vfprintf+0x366>
    1d80:	80 e2       	ldi	r24, 0x20	; 32
    1d82:	a7 fc       	sbrc	r10, 7
    1d84:	8d e2       	ldi	r24, 0x2D	; 45
    1d86:	b6 01       	movw	r22, r12
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1d8e:	89 14       	cp	r8, r9
    1d90:	38 f4       	brcc	.+14     	; 0x1da0 <vfprintf+0x384>
    1d92:	b6 01       	movw	r22, r12
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1d9c:	9a 94       	dec	r9
    1d9e:	f7 cf       	rjmp	.-18     	; 0x1d8e <vfprintf+0x372>
    1da0:	8a 94       	dec	r8
    1da2:	f3 01       	movw	r30, r6
    1da4:	e8 0d       	add	r30, r8
    1da6:	f1 1d       	adc	r31, r1
    1da8:	80 81       	ld	r24, Z
    1daa:	b6 01       	movw	r22, r12
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1db2:	81 10       	cpse	r8, r1
    1db4:	f5 cf       	rjmp	.-22     	; 0x1da0 <vfprintf+0x384>
    1db6:	22 20       	and	r2, r2
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <vfprintf+0x3a0>
    1dba:	42 ce       	rjmp	.-892    	; 0x1a40 <vfprintf+0x24>
    1dbc:	b6 01       	movw	r22, r12
    1dbe:	80 e2       	ldi	r24, 0x20	; 32
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <fputc>
    1dc6:	2a 94       	dec	r2
    1dc8:	f6 cf       	rjmp	.-20     	; 0x1db6 <vfprintf+0x39a>
    1dca:	f6 01       	movw	r30, r12
    1dcc:	86 81       	ldd	r24, Z+6	; 0x06
    1dce:	97 81       	ldd	r25, Z+7	; 0x07
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x3ba>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	2b 96       	adiw	r28, 0x0b	; 11
    1dd8:	e2 e1       	ldi	r30, 0x12	; 18
    1dda:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__epilogue_restores__>

00001dde <strnlen_P>:
    1dde:	fc 01       	movw	r30, r24
    1de0:	05 90       	lpm	r0, Z+
    1de2:	61 50       	subi	r22, 0x01	; 1
    1de4:	70 40       	sbci	r23, 0x00	; 0
    1de6:	01 10       	cpse	r0, r1
    1de8:	d8 f7       	brcc	.-10     	; 0x1de0 <strnlen_P+0x2>
    1dea:	80 95       	com	r24
    1dec:	90 95       	com	r25
    1dee:	8e 0f       	add	r24, r30
    1df0:	9f 1f       	adc	r25, r31
    1df2:	08 95       	ret

00001df4 <strnlen>:
    1df4:	fc 01       	movw	r30, r24
    1df6:	61 50       	subi	r22, 0x01	; 1
    1df8:	70 40       	sbci	r23, 0x00	; 0
    1dfa:	01 90       	ld	r0, Z+
    1dfc:	01 10       	cpse	r0, r1
    1dfe:	d8 f7       	brcc	.-10     	; 0x1df6 <strnlen+0x2>
    1e00:	80 95       	com	r24
    1e02:	90 95       	com	r25
    1e04:	8e 0f       	add	r24, r30
    1e06:	9f 1f       	adc	r25, r31
    1e08:	08 95       	ret

00001e0a <fputc>:
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	fb 01       	movw	r30, r22
    1e14:	23 81       	ldd	r18, Z+3	; 0x03
    1e16:	21 fd       	sbrc	r18, 1
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <fputc+0x16>
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	9f ef       	ldi	r25, 0xFF	; 255
    1e1e:	2c c0       	rjmp	.+88     	; 0x1e78 <fputc+0x6e>
    1e20:	22 ff       	sbrs	r18, 2
    1e22:	16 c0       	rjmp	.+44     	; 0x1e50 <fputc+0x46>
    1e24:	46 81       	ldd	r20, Z+6	; 0x06
    1e26:	57 81       	ldd	r21, Z+7	; 0x07
    1e28:	24 81       	ldd	r18, Z+4	; 0x04
    1e2a:	35 81       	ldd	r19, Z+5	; 0x05
    1e2c:	42 17       	cp	r20, r18
    1e2e:	53 07       	cpc	r21, r19
    1e30:	44 f4       	brge	.+16     	; 0x1e42 <fputc+0x38>
    1e32:	a0 81       	ld	r26, Z
    1e34:	b1 81       	ldd	r27, Z+1	; 0x01
    1e36:	9d 01       	movw	r18, r26
    1e38:	2f 5f       	subi	r18, 0xFF	; 255
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	31 83       	std	Z+1, r19	; 0x01
    1e3e:	20 83       	st	Z, r18
    1e40:	8c 93       	st	X, r24
    1e42:	26 81       	ldd	r18, Z+6	; 0x06
    1e44:	37 81       	ldd	r19, Z+7	; 0x07
    1e46:	2f 5f       	subi	r18, 0xFF	; 255
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	37 83       	std	Z+7, r19	; 0x07
    1e4c:	26 83       	std	Z+6, r18	; 0x06
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <fputc+0x6e>
    1e50:	8b 01       	movw	r16, r22
    1e52:	ec 01       	movw	r28, r24
    1e54:	fb 01       	movw	r30, r22
    1e56:	00 84       	ldd	r0, Z+8	; 0x08
    1e58:	f1 85       	ldd	r31, Z+9	; 0x09
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	09 95       	icall
    1e5e:	89 2b       	or	r24, r25
    1e60:	e1 f6       	brne	.-72     	; 0x1e1a <fputc+0x10>
    1e62:	d8 01       	movw	r26, r16
    1e64:	16 96       	adiw	r26, 0x06	; 6
    1e66:	8d 91       	ld	r24, X+
    1e68:	9c 91       	ld	r25, X
    1e6a:	17 97       	sbiw	r26, 0x07	; 7
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	17 96       	adiw	r26, 0x07	; 7
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
    1e74:	16 97       	sbiw	r26, 0x06	; 6
    1e76:	ce 01       	movw	r24, r28
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <__ultoa_invert>:
    1e82:	fa 01       	movw	r30, r20
    1e84:	aa 27       	eor	r26, r26
    1e86:	28 30       	cpi	r18, 0x08	; 8
    1e88:	51 f1       	breq	.+84     	; 0x1ede <__ultoa_invert+0x5c>
    1e8a:	20 31       	cpi	r18, 0x10	; 16
    1e8c:	81 f1       	breq	.+96     	; 0x1eee <__ultoa_invert+0x6c>
    1e8e:	e8 94       	clt
    1e90:	6f 93       	push	r22
    1e92:	6e 7f       	andi	r22, 0xFE	; 254
    1e94:	6e 5f       	subi	r22, 0xFE	; 254
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	af 4f       	sbci	r26, 0xFF	; 255
    1e9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ea0:	3e d0       	rcall	.+124    	; 0x1f1e <__ultoa_invert+0x9c>
    1ea2:	b4 e0       	ldi	r27, 0x04	; 4
    1ea4:	3c d0       	rcall	.+120    	; 0x1f1e <__ultoa_invert+0x9c>
    1ea6:	67 0f       	add	r22, r23
    1ea8:	78 1f       	adc	r23, r24
    1eaa:	89 1f       	adc	r24, r25
    1eac:	9a 1f       	adc	r25, r26
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	68 0f       	add	r22, r24
    1eb2:	79 1f       	adc	r23, r25
    1eb4:	8a 1f       	adc	r24, r26
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	a1 1d       	adc	r26, r1
    1eba:	6a 0f       	add	r22, r26
    1ebc:	71 1d       	adc	r23, r1
    1ebe:	81 1d       	adc	r24, r1
    1ec0:	91 1d       	adc	r25, r1
    1ec2:	a1 1d       	adc	r26, r1
    1ec4:	20 d0       	rcall	.+64     	; 0x1f06 <__ultoa_invert+0x84>
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <__ultoa_invert+0x48>
    1ec8:	68 94       	set
    1eca:	3f 91       	pop	r19
    1ecc:	2a e0       	ldi	r18, 0x0A	; 10
    1ece:	26 9f       	mul	r18, r22
    1ed0:	11 24       	eor	r1, r1
    1ed2:	30 19       	sub	r19, r0
    1ed4:	30 5d       	subi	r19, 0xD0	; 208
    1ed6:	31 93       	st	Z+, r19
    1ed8:	de f6       	brtc	.-74     	; 0x1e90 <__ultoa_invert+0xe>
    1eda:	cf 01       	movw	r24, r30
    1edc:	08 95       	ret
    1ede:	46 2f       	mov	r20, r22
    1ee0:	47 70       	andi	r20, 0x07	; 7
    1ee2:	40 5d       	subi	r20, 0xD0	; 208
    1ee4:	41 93       	st	Z+, r20
    1ee6:	b3 e0       	ldi	r27, 0x03	; 3
    1ee8:	0f d0       	rcall	.+30     	; 0x1f08 <__ultoa_invert+0x86>
    1eea:	c9 f7       	brne	.-14     	; 0x1ede <__ultoa_invert+0x5c>
    1eec:	f6 cf       	rjmp	.-20     	; 0x1eda <__ultoa_invert+0x58>
    1eee:	46 2f       	mov	r20, r22
    1ef0:	4f 70       	andi	r20, 0x0F	; 15
    1ef2:	40 5d       	subi	r20, 0xD0	; 208
    1ef4:	4a 33       	cpi	r20, 0x3A	; 58
    1ef6:	18 f0       	brcs	.+6      	; 0x1efe <__ultoa_invert+0x7c>
    1ef8:	49 5d       	subi	r20, 0xD9	; 217
    1efa:	31 fd       	sbrc	r19, 1
    1efc:	40 52       	subi	r20, 0x20	; 32
    1efe:	41 93       	st	Z+, r20
    1f00:	02 d0       	rcall	.+4      	; 0x1f06 <__ultoa_invert+0x84>
    1f02:	a9 f7       	brne	.-22     	; 0x1eee <__ultoa_invert+0x6c>
    1f04:	ea cf       	rjmp	.-44     	; 0x1eda <__ultoa_invert+0x58>
    1f06:	b4 e0       	ldi	r27, 0x04	; 4
    1f08:	a6 95       	lsr	r26
    1f0a:	97 95       	ror	r25
    1f0c:	87 95       	ror	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	ba 95       	dec	r27
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__ultoa_invert+0x86>
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	61 05       	cpc	r22, r1
    1f1a:	71 05       	cpc	r23, r1
    1f1c:	08 95       	ret
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	0a 2e       	mov	r0, r26
    1f24:	06 94       	lsr	r0
    1f26:	57 95       	ror	r21
    1f28:	47 95       	ror	r20
    1f2a:	37 95       	ror	r19
    1f2c:	27 95       	ror	r18
    1f2e:	ba 95       	dec	r27
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <__ultoa_invert+0xa2>
    1f32:	62 0f       	add	r22, r18
    1f34:	73 1f       	adc	r23, r19
    1f36:	84 1f       	adc	r24, r20
    1f38:	95 1f       	adc	r25, r21
    1f3a:	a0 1d       	adc	r26, r0
    1f3c:	08 95       	ret

00001f3e <__muluhisi3>:
    1f3e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__umulhisi3>
    1f42:	a5 9f       	mul	r26, r21
    1f44:	90 0d       	add	r25, r0
    1f46:	b4 9f       	mul	r27, r20
    1f48:	90 0d       	add	r25, r0
    1f4a:	a4 9f       	mul	r26, r20
    1f4c:	80 0d       	add	r24, r0
    1f4e:	91 1d       	adc	r25, r1
    1f50:	11 24       	eor	r1, r1
    1f52:	08 95       	ret

00001f54 <__mulshisi3>:
    1f54:	b7 ff       	sbrs	r27, 7
    1f56:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__muluhisi3>

00001f5a <__mulohisi3>:
    1f5a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__muluhisi3>
    1f5e:	82 1b       	sub	r24, r18
    1f60:	93 0b       	sbc	r25, r19
    1f62:	08 95       	ret

00001f64 <__prologue_saves__>:
    1f64:	2f 92       	push	r2
    1f66:	3f 92       	push	r3
    1f68:	4f 92       	push	r4
    1f6a:	5f 92       	push	r5
    1f6c:	6f 92       	push	r6
    1f6e:	7f 92       	push	r7
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	ca 1b       	sub	r28, r26
    1f8e:	db 0b       	sbc	r29, r27
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	09 94       	ijmp

00001f9c <__epilogue_restores__>:
    1f9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f9e:	39 88       	ldd	r3, Y+17	; 0x11
    1fa0:	48 88       	ldd	r4, Y+16	; 0x10
    1fa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1faa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fae:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb2:	df 80       	ldd	r13, Y+7	; 0x07
    1fb4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fb8:	0c 81       	ldd	r16, Y+4	; 0x04
    1fba:	1b 81       	ldd	r17, Y+3	; 0x03
    1fbc:	aa 81       	ldd	r26, Y+2	; 0x02
    1fbe:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc0:	ce 0f       	add	r28, r30
    1fc2:	d1 1d       	adc	r29, r1
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	ed 01       	movw	r28, r26
    1fd0:	08 95       	ret

00001fd2 <__umulhisi3>:
    1fd2:	a2 9f       	mul	r26, r18
    1fd4:	b0 01       	movw	r22, r0
    1fd6:	b3 9f       	mul	r27, r19
    1fd8:	c0 01       	movw	r24, r0
    1fda:	a3 9f       	mul	r26, r19
    1fdc:	70 0d       	add	r23, r0
    1fde:	81 1d       	adc	r24, r1
    1fe0:	11 24       	eor	r1, r1
    1fe2:	91 1d       	adc	r25, r1
    1fe4:	b2 9f       	mul	r27, r18
    1fe6:	70 0d       	add	r23, r0
    1fe8:	81 1d       	adc	r24, r1
    1fea:	11 24       	eor	r1, r1
    1fec:	91 1d       	adc	r25, r1
    1fee:	08 95       	ret

00001ff0 <_exit>:
    1ff0:	f8 94       	cli

00001ff2 <__stop_program>:
    1ff2:	ff cf       	rjmp	.-2      	; 0x1ff2 <__stop_program>
